
cv_10_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000377c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08003904  08003904  00013904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a38  08003a38  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08003a38  08003a38  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a38  08003a38  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a38  08003a38  00013a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a3c  08003a3c  00013a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08003a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  200001f4  08003c34  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08003c34  000203c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd1b  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000210e  00000000  00000000  0002bf3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000df0  00000000  00000000  0002e050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd8  00000000  00000000  0002ee40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019e5e  00000000  00000000  0002fb18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a797  00000000  00000000  00049976  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009059e  00000000  00000000  0005410d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e46ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b48  00000000  00000000  000e4728  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001f4 	.word	0x200001f4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080038ec 	.word	0x080038ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f8 	.word	0x200001f8
 80001c4:	080038ec 	.word	0x080038ec

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__NVIC_GetPriorityGrouping+0x18>)
 80001e2:	68db      	ldr	r3, [r3, #12]
 80001e4:	0a1b      	lsrs	r3, r3, #8
 80001e6:	f003 0307 	and.w	r3, r3, #7
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	e000ed00 	.word	0xe000ed00

080001f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	2b00      	cmp	r3, #0
 8000208:	db0b      	blt.n	8000222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	f003 021f 	and.w	r2, r3, #31
 8000210:	4907      	ldr	r1, [pc, #28]	; (8000230 <__NVIC_EnableIRQ+0x38>)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	095b      	lsrs	r3, r3, #5
 8000218:	2001      	movs	r0, #1
 800021a:	fa00 f202 	lsl.w	r2, r0, r2
 800021e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	e000e100 	.word	0xe000e100

08000234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	6039      	str	r1, [r7, #0]
 800023e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000244:	2b00      	cmp	r3, #0
 8000246:	db0a      	blt.n	800025e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	b2da      	uxtb	r2, r3
 800024c:	490c      	ldr	r1, [pc, #48]	; (8000280 <__NVIC_SetPriority+0x4c>)
 800024e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000252:	0112      	lsls	r2, r2, #4
 8000254:	b2d2      	uxtb	r2, r2
 8000256:	440b      	add	r3, r1
 8000258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800025c:	e00a      	b.n	8000274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	b2da      	uxtb	r2, r3
 8000262:	4908      	ldr	r1, [pc, #32]	; (8000284 <__NVIC_SetPriority+0x50>)
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	f003 030f 	and.w	r3, r3, #15
 800026a:	3b04      	subs	r3, #4
 800026c:	0112      	lsls	r2, r2, #4
 800026e:	b2d2      	uxtb	r2, r2
 8000270:	440b      	add	r3, r1
 8000272:	761a      	strb	r2, [r3, #24]
}
 8000274:	bf00      	nop
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr
 8000280:	e000e100 	.word	0xe000e100
 8000284:	e000ed00 	.word	0xe000ed00

08000288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000288:	b480      	push	{r7}
 800028a:	b089      	sub	sp, #36	; 0x24
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	f003 0307 	and.w	r3, r3, #7
 800029a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800029c:	69fb      	ldr	r3, [r7, #28]
 800029e:	f1c3 0307 	rsb	r3, r3, #7
 80002a2:	2b04      	cmp	r3, #4
 80002a4:	bf28      	it	cs
 80002a6:	2304      	movcs	r3, #4
 80002a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002aa:	69fb      	ldr	r3, [r7, #28]
 80002ac:	3304      	adds	r3, #4
 80002ae:	2b06      	cmp	r3, #6
 80002b0:	d902      	bls.n	80002b8 <NVIC_EncodePriority+0x30>
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	3b03      	subs	r3, #3
 80002b6:	e000      	b.n	80002ba <NVIC_EncodePriority+0x32>
 80002b8:	2300      	movs	r3, #0
 80002ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002bc:	f04f 32ff 	mov.w	r2, #4294967295
 80002c0:	69bb      	ldr	r3, [r7, #24]
 80002c2:	fa02 f303 	lsl.w	r3, r2, r3
 80002c6:	43da      	mvns	r2, r3
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	401a      	ands	r2, r3
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002d0:	f04f 31ff 	mov.w	r1, #4294967295
 80002d4:	697b      	ldr	r3, [r7, #20]
 80002d6:	fa01 f303 	lsl.w	r3, r1, r3
 80002da:	43d9      	mvns	r1, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002e0:	4313      	orrs	r3, r2
         );
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	3724      	adds	r7, #36	; 0x24
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
	...

080002f0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002f8:	4b08      	ldr	r3, [pc, #32]	; (800031c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002fa:	695a      	ldr	r2, [r3, #20]
 80002fc:	4907      	ldr	r1, [pc, #28]	; (800031c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4313      	orrs	r3, r2
 8000302:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000306:	695a      	ldr	r2, [r3, #20]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4013      	ands	r3, r2
 800030c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800030e:	68fb      	ldr	r3, [r7, #12]
}
 8000310:	bf00      	nop
 8000312:	3714      	adds	r7, #20
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr
 800031c:	40021000 	.word	0x40021000

08000320 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000324:	2001      	movs	r0, #1
 8000326:	f7ff ffe3 	bl	80002f0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800032a:	f7ff ff57 	bl	80001dc <__NVIC_GetPriorityGrouping>
 800032e:	4603      	mov	r3, r0
 8000330:	2200      	movs	r2, #0
 8000332:	2100      	movs	r1, #0
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ffa7 	bl	8000288 <NVIC_EncodePriority>
 800033a:	4603      	mov	r3, r0
 800033c:	4619      	mov	r1, r3
 800033e:	2010      	movs	r0, #16
 8000340:	f7ff ff78 	bl	8000234 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000344:	2010      	movs	r0, #16
 8000346:	f7ff ff57 	bl	80001f8 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800034a:	f7ff ff47 	bl	80001dc <__NVIC_GetPriorityGrouping>
 800034e:	4603      	mov	r3, r0
 8000350:	2200      	movs	r2, #0
 8000352:	2100      	movs	r1, #0
 8000354:	4618      	mov	r0, r3
 8000356:	f7ff ff97 	bl	8000288 <NVIC_EncodePriority>
 800035a:	4603      	mov	r3, r0
 800035c:	4619      	mov	r1, r3
 800035e:	2011      	movs	r0, #17
 8000360:	f7ff ff68 	bl	8000234 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000364:	2011      	movs	r0, #17
 8000366:	f7ff ff47 	bl	80001f8 <__NVIC_EnableIRQ>

}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <LL_AHB1_GRP1_EnableClock>:
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000378:	4b08      	ldr	r3, [pc, #32]	; (800039c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800037a:	695a      	ldr	r2, [r3, #20]
 800037c:	4907      	ldr	r1, [pc, #28]	; (800039c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4313      	orrs	r3, r2
 8000382:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000386:	695a      	ldr	r2, [r3, #20]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4013      	ands	r3, r2
 800038c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	bf00      	nop
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	40021000 	.word	0x40021000

080003a0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80003a4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80003a8:	f7ff ffe2 	bl	8000370 <LL_AHB1_GRP1_EnableClock>

}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <LL_RCC_HSI_Enable+0x1c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <LL_RCC_HSI_Enable+0x1c>)
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	6013      	str	r3, [r2, #0]
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000

080003d0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <LL_RCC_HSI_IsReady+0x20>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f003 0302 	and.w	r3, r3, #2
 80003dc:	2b02      	cmp	r3, #2
 80003de:	bf0c      	ite	eq
 80003e0:	2301      	moveq	r3, #1
 80003e2:	2300      	movne	r3, #0
 80003e4:	b2db      	uxtb	r3, r3
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	40021000 	.word	0x40021000

080003f4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80003fc:	4b07      	ldr	r3, [pc, #28]	; (800041c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	00db      	lsls	r3, r3, #3
 8000408:	4904      	ldr	r1, [pc, #16]	; (800041c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800040a:	4313      	orrs	r3, r2
 800040c:	600b      	str	r3, [r1, #0]
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000

08000420 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <LL_RCC_SetSysClkSource+0x24>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	f023 0203 	bic.w	r2, r3, #3
 8000430:	4904      	ldr	r1, [pc, #16]	; (8000444 <LL_RCC_SetSysClkSource+0x24>)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4313      	orrs	r3, r2
 8000436:	604b      	str	r3, [r1, #4]
}
 8000438:	bf00      	nop
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	40021000 	.word	0x40021000

08000448 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <LL_RCC_GetSysClkSource+0x18>)
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	f003 030c 	and.w	r3, r3, #12
}
 8000454:	4618      	mov	r0, r3
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	40021000 	.word	0x40021000

08000464 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800046c:	4b06      	ldr	r3, [pc, #24]	; (8000488 <LL_RCC_SetAHBPrescaler+0x24>)
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000474:	4904      	ldr	r1, [pc, #16]	; (8000488 <LL_RCC_SetAHBPrescaler+0x24>)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4313      	orrs	r3, r2
 800047a:	604b      	str	r3, [r1, #4]
}
 800047c:	bf00      	nop
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr
 8000488:	40021000 	.word	0x40021000

0800048c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800049c:	4904      	ldr	r1, [pc, #16]	; (80004b0 <LL_RCC_SetAPB1Prescaler+0x24>)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	604b      	str	r3, [r1, #4]
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr
 80004b0:	40021000 	.word	0x40021000

080004b4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80004c4:	4904      	ldr	r1, [pc, #16]	; (80004d8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4313      	orrs	r3, r2
 80004ca:	604b      	str	r3, [r1, #4]
}
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	40021000 	.word	0x40021000

080004dc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <LL_FLASH_SetLatency+0x24>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f023 0207 	bic.w	r2, r3, #7
 80004ec:	4904      	ldr	r1, [pc, #16]	; (8000500 <LL_FLASH_SetLatency+0x24>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4313      	orrs	r3, r2
 80004f2:	600b      	str	r3, [r1, #0]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	40022000 	.word	0x40022000

08000504 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <LL_FLASH_GetLatency+0x18>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f003 0307 	and.w	r3, r3, #7
}
 8000510:	4618      	mov	r0, r3
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40022000 	.word	0x40022000

08000520 <main>:




int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f001 f904 	bl	8001730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f81c 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f7ff ff38 	bl	80003a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000530:	f7ff fef6 	bl	8000320 <MX_DMA_Init>
  MX_TIM2_Init();
 8000534:	f000 fae2 	bl	8000afc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000538:	f000 fb56 	bl	8000be8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800053c:	f000 ff86 	bl	800144c <MX_USART2_UART_Init>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000540:	2100      	movs	r1, #0
 8000542:	4805      	ldr	r0, [pc, #20]	; (8000558 <main+0x38>)
 8000544:	f001 fc92 	bl	8001e6c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000548:	4804      	ldr	r0, [pc, #16]	; (800055c <main+0x3c>)
 800054a:	f001 fbfb 	bl	8001d44 <HAL_TIM_Base_Start_IT>

  USART2_RegisterCallback(proccesDmaData);
 800054e:	4804      	ldr	r0, [pc, #16]	; (8000560 <main+0x40>)
 8000550:	f000 ff6a 	bl	8001428 <USART2_RegisterCallback>


  while (1)
 8000554:	e7fe      	b.n	8000554 <main+0x34>
 8000556:	bf00      	nop
 8000558:	20000280 	.word	0x20000280
 800055c:	20000240 	.word	0x20000240
 8000560:	080005d5 	.word	0x080005d5

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000568:	2000      	movs	r0, #0
 800056a:	f7ff ffb7 	bl	80004dc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800056e:	bf00      	nop
 8000570:	f7ff ffc8 	bl	8000504 <LL_FLASH_GetLatency>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1fa      	bne.n	8000570 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800057a:	f7ff ff19 	bl	80003b0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800057e:	bf00      	nop
 8000580:	f7ff ff26 	bl	80003d0 <LL_RCC_HSI_IsReady>
 8000584:	4603      	mov	r3, r0
 8000586:	2b01      	cmp	r3, #1
 8000588:	d1fa      	bne.n	8000580 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800058a:	2010      	movs	r0, #16
 800058c:	f7ff ff32 	bl	80003f4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000590:	2000      	movs	r0, #0
 8000592:	f7ff ff67 	bl	8000464 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000596:	2000      	movs	r0, #0
 8000598:	f7ff ff78 	bl	800048c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 800059c:	2000      	movs	r0, #0
 800059e:	f7ff ff89 	bl	80004b4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f7ff ff3c 	bl	8000420 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80005a8:	bf00      	nop
 80005aa:	f7ff ff4d 	bl	8000448 <LL_RCC_GetSysClkSource>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1fa      	bne.n	80005aa <SystemClock_Config+0x46>
  {

  }
  LL_SetSystemCoreClock(8000000);
 80005b4:	4806      	ldr	r0, [pc, #24]	; (80005d0 <SystemClock_Config+0x6c>)
 80005b6:	f003 f8a5 	bl	8003704 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80005ba:	2000      	movs	r0, #0
 80005bc:	f001 f8ce 	bl	800175c <HAL_InitTick>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005c6:	f000 f8b8 	bl	800073a <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	007a1200 	.word	0x007a1200

080005d4 <proccesDmaData>:

void proccesDmaData(const uint8_t* data, uint16_t len){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	807b      	strh	r3, [r7, #2]

	static char vzor_Manual[]="manual", vzor_Auto[]="auto", vzor_PWM[]="PWM";
	uint8_t count=0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	73fb      	strb	r3, [r7, #15]
	char value_of_intensity[3];

	for(uint8_t i = 0; i<len; i++){
 80005e4:	2300      	movs	r3, #0
 80005e6:	73bb      	strb	r3, [r7, #14]
 80005e8:	e07e      	b.n	80006e8 <proccesDmaData+0x114>

		if(start_flag){
 80005ea:	4b44      	ldr	r3, [pc, #272]	; (80006fc <proccesDmaData+0x128>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d06e      	beq.n	80006d0 <proccesDmaData+0xfc>
			if (*(data+i) == '$'){
 80005f2:	7bbb      	ldrb	r3, [r7, #14]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	4413      	add	r3, r2
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b24      	cmp	r3, #36	; 0x24
 80005fc:	d14b      	bne.n	8000696 <proccesDmaData+0xc2>
				start_flag=0;
 80005fe:	4b3f      	ldr	r3, [pc, #252]	; (80006fc <proccesDmaData+0x128>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
				index_buffera=0;
 8000604:	4b3e      	ldr	r3, [pc, #248]	; (8000700 <proccesDmaData+0x12c>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
				if(!strcmp(buffer,vzor_Manual)){
 800060a:	493e      	ldr	r1, [pc, #248]	; (8000704 <proccesDmaData+0x130>)
 800060c:	483e      	ldr	r0, [pc, #248]	; (8000708 <proccesDmaData+0x134>)
 800060e:	f7ff fddb 	bl	80001c8 <strcmp>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d103      	bne.n	8000620 <proccesDmaData+0x4c>
					mode=0;
 8000618:	4b3c      	ldr	r3, [pc, #240]	; (800070c <proccesDmaData+0x138>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
 800061e:	e034      	b.n	800068a <proccesDmaData+0xb6>
				}
				else if(!strcmp(buffer,vzor_Auto)){
 8000620:	493b      	ldr	r1, [pc, #236]	; (8000710 <proccesDmaData+0x13c>)
 8000622:	4839      	ldr	r0, [pc, #228]	; (8000708 <proccesDmaData+0x134>)
 8000624:	f7ff fdd0 	bl	80001c8 <strcmp>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d103      	bne.n	8000636 <proccesDmaData+0x62>
					mode=1;
 800062e:	4b37      	ldr	r3, [pc, #220]	; (800070c <proccesDmaData+0x138>)
 8000630:	2201      	movs	r2, #1
 8000632:	701a      	strb	r2, [r3, #0]
 8000634:	e029      	b.n	800068a <proccesDmaData+0xb6>
				}
				else if(!mode) {
 8000636:	4b35      	ldr	r3, [pc, #212]	; (800070c <proccesDmaData+0x138>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d125      	bne.n	800068a <proccesDmaData+0xb6>
					for(uint8_t j=0; j<3; j++){
 800063e:	2300      	movs	r3, #0
 8000640:	737b      	strb	r3, [r7, #13]
 8000642:	e00d      	b.n	8000660 <proccesDmaData+0x8c>
						if(buffer[j]==vzor_PWM[j]){
 8000644:	7b7b      	ldrb	r3, [r7, #13]
 8000646:	4a30      	ldr	r2, [pc, #192]	; (8000708 <proccesDmaData+0x134>)
 8000648:	5cd2      	ldrb	r2, [r2, r3]
 800064a:	7b7b      	ldrb	r3, [r7, #13]
 800064c:	4931      	ldr	r1, [pc, #196]	; (8000714 <proccesDmaData+0x140>)
 800064e:	5ccb      	ldrb	r3, [r1, r3]
 8000650:	429a      	cmp	r2, r3
 8000652:	d102      	bne.n	800065a <proccesDmaData+0x86>
							count++;
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	3301      	adds	r3, #1
 8000658:	73fb      	strb	r3, [r7, #15]
					for(uint8_t j=0; j<3; j++){
 800065a:	7b7b      	ldrb	r3, [r7, #13]
 800065c:	3301      	adds	r3, #1
 800065e:	737b      	strb	r3, [r7, #13]
 8000660:	7b7b      	ldrb	r3, [r7, #13]
 8000662:	2b02      	cmp	r3, #2
 8000664:	d9ee      	bls.n	8000644 <proccesDmaData+0x70>
						}
					}
					if(count==3){
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	2b03      	cmp	r3, #3
 800066a:	d10e      	bne.n	800068a <proccesDmaData+0xb6>
						value_of_intensity[0]=buffer[3];
 800066c:	4b26      	ldr	r3, [pc, #152]	; (8000708 <proccesDmaData+0x134>)
 800066e:	78db      	ldrb	r3, [r3, #3]
 8000670:	723b      	strb	r3, [r7, #8]
						value_of_intensity[1]=buffer[4];
 8000672:	4b25      	ldr	r3, [pc, #148]	; (8000708 <proccesDmaData+0x134>)
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	727b      	strb	r3, [r7, #9]
						intensity=atoi(value_of_intensity);
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	4618      	mov	r0, r3
 800067e:	f003 f851 	bl	8003724 <atoi>
 8000682:	4603      	mov	r3, r0
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b24      	ldr	r3, [pc, #144]	; (8000718 <proccesDmaData+0x144>)
 8000688:	701a      	strb	r2, [r3, #0]
					}
				}
				memset(buffer,'\000',sizeof(buffer));
 800068a:	2223      	movs	r2, #35	; 0x23
 800068c:	2100      	movs	r1, #0
 800068e:	481e      	ldr	r0, [pc, #120]	; (8000708 <proccesDmaData+0x134>)
 8000690:	f003 f870 	bl	8003774 <memset>
 8000694:	e00c      	b.n	80006b0 <proccesDmaData+0xdc>
			}
			else{
				buffer[index_buffera++]=*(data+i);
 8000696:	7bbb      	ldrb	r3, [r7, #14]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	441a      	add	r2, r3
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <proccesDmaData+0x12c>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	1c59      	adds	r1, r3, #1
 80006a2:	b2c8      	uxtb	r0, r1
 80006a4:	4916      	ldr	r1, [pc, #88]	; (8000700 <proccesDmaData+0x12c>)
 80006a6:	7008      	strb	r0, [r1, #0]
 80006a8:	4619      	mov	r1, r3
 80006aa:	7812      	ldrb	r2, [r2, #0]
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <proccesDmaData+0x134>)
 80006ae:	545a      	strb	r2, [r3, r1]
			}

			if(index_buffera>34){
 80006b0:	4b13      	ldr	r3, [pc, #76]	; (8000700 <proccesDmaData+0x12c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b22      	cmp	r3, #34	; 0x22
 80006b6:	d914      	bls.n	80006e2 <proccesDmaData+0x10e>
				index_buffera=0;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <proccesDmaData+0x12c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
				start_flag=0;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <proccesDmaData+0x128>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
				memset(buffer,'\000',sizeof(buffer));
 80006c4:	2223      	movs	r2, #35	; 0x23
 80006c6:	2100      	movs	r1, #0
 80006c8:	480f      	ldr	r0, [pc, #60]	; (8000708 <proccesDmaData+0x134>)
 80006ca:	f003 f853 	bl	8003774 <memset>
 80006ce:	e008      	b.n	80006e2 <proccesDmaData+0x10e>
			}
		}
		else if (*(data+i) == '$'){
 80006d0:	7bbb      	ldrb	r3, [r7, #14]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b24      	cmp	r3, #36	; 0x24
 80006da:	d102      	bne.n	80006e2 <proccesDmaData+0x10e>
			start_flag=1;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <proccesDmaData+0x128>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<len; i++){
 80006e2:	7bbb      	ldrb	r3, [r7, #14]
 80006e4:	3301      	adds	r3, #1
 80006e6:	73bb      	strb	r3, [r7, #14]
 80006e8:	7bbb      	ldrb	r3, [r7, #14]
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	887a      	ldrh	r2, [r7, #2]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	f63f af7b 	bhi.w	80005ea <proccesDmaData+0x16>
		}
	}
}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000210 	.word	0x20000210
 8000700:	20000211 	.word	0x20000211
 8000704:	20000004 	.word	0x20000004
 8000708:	2000021c 	.word	0x2000021c
 800070c:	20000000 	.word	0x20000000
 8000710:	2000000c 	.word	0x2000000c
 8000714:	20000014 	.word	0x20000014
 8000718:	20000001 	.word	0x20000001

0800071c <setDutyCycle>:

void setDutyCycle(uint8_t D){
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	TIM2->CCR1 = D;
 8000726:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <Error_Handler>:



void Error_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_MspInit+0x44>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	4a0e      	ldr	r2, [pc, #56]	; (800078c <HAL_MspInit+0x44>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6193      	str	r3, [r2, #24]
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <HAL_MspInit+0x44>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <HAL_MspInit+0x44>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <HAL_MspInit+0x44>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_MspInit+0x44>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000

08000790 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	3b01      	subs	r3, #1
 800079e:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <LL_DMA_DisableChannel+0x3c>)
 80007a0:	5cd3      	ldrb	r3, [r2, r3]
 80007a2:	461a      	mov	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4413      	add	r3, r2
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	683a      	ldr	r2, [r7, #0]
 80007ac:	3a01      	subs	r2, #1
 80007ae:	4907      	ldr	r1, [pc, #28]	; (80007cc <LL_DMA_DisableChannel+0x3c>)
 80007b0:	5c8a      	ldrb	r2, [r1, r2]
 80007b2:	4611      	mov	r1, r2
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	440a      	add	r2, r1
 80007b8:	f023 0301 	bic.w	r3, r3, #1
 80007bc:	6013      	str	r3, [r2, #0]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	08003904 	.word	0x08003904

080007d0 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80007e4:	bf0c      	ite	eq
 80007e6:	2301      	moveq	r3, #1
 80007e8:	2300      	movne	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000808:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800080c:	bf0c      	ite	eq
 800080e:	2301      	moveq	r3, #1
 8000810:	2300      	movne	r3, #0
 8000812:	b2db      	uxtb	r3, r3
}
 8000814:	4618      	mov	r0, r3
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000830:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000834:	bf0c      	ite	eq
 8000836:	2301      	moveq	r3, #1
 8000838:	2300      	movne	r3, #0
 800083a:	b2db      	uxtb	r3, r3
}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000856:	605a      	str	r2, [r3, #4]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000872:	605a      	str	r2, [r3, #4]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800088e:	605a      	str	r2, [r3, #4]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	f003 0310 	and.w	r3, r3, #16
 80008ac:	2b10      	cmp	r3, #16
 80008ae:	d101      	bne.n	80008b4 <LL_USART_IsActiveFlag_IDLE+0x18>
 80008b0:	2301      	movs	r3, #1
 80008b2:	e000      	b.n	80008b6 <LL_USART_IsActiveFlag_IDLE+0x1a>
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d2:	2b40      	cmp	r3, #64	; 0x40
 80008d4:	d101      	bne.n	80008da <LL_USART_IsActiveFlag_TC+0x18>
 80008d6:	2301      	movs	r3, #1
 80008d8:	e000      	b.n	80008dc <LL_USART_IsActiveFlag_TC+0x1a>
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2210      	movs	r2, #16
 80008f4:	621a      	str	r2, [r3, #32]
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <HardFault_Handler+0x4>

08000916 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <MemManage_Handler+0x4>

0800091c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <BusFault_Handler+0x4>

08000922 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <UsageFault_Handler+0x4>

08000928 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000956:	f000 ff31 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <DMA1_Channel6_IRQHandler+0x38>)
 8000966:	f7ff ff33 	bl	80007d0 <LL_DMA_IsActiveFlag_TC6>
 800096a:	4603      	mov	r3, r0
 800096c:	2b01      	cmp	r3, #1
 800096e:	d105      	bne.n	800097c <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8000970:	f000 fe4e 	bl	8001610 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8000974:	4808      	ldr	r0, [pc, #32]	; (8000998 <DMA1_Channel6_IRQHandler+0x38>)
 8000976:	f7ff ff67 	bl	8000848 <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 800097a:	e00a      	b.n	8000992 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 800097c:	4806      	ldr	r0, [pc, #24]	; (8000998 <DMA1_Channel6_IRQHandler+0x38>)
 800097e:	f7ff ff4f 	bl	8000820 <LL_DMA_IsActiveFlag_HT6>
 8000982:	4603      	mov	r3, r0
 8000984:	2b01      	cmp	r3, #1
 8000986:	d104      	bne.n	8000992 <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8000988:	f000 fe42 	bl	8001610 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <DMA1_Channel6_IRQHandler+0x38>)
 800098e:	f7ff ff77 	bl	8000880 <LL_DMA_ClearFlag_HT6>
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40020000 	.word	0x40020000

0800099c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 80009a0:	480a      	ldr	r0, [pc, #40]	; (80009cc <DMA1_Channel7_IRQHandler+0x30>)
 80009a2:	f7ff ff29 	bl	80007f8 <LL_DMA_IsActiveFlag_TC7>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d10d      	bne.n	80009c8 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 80009ac:	4807      	ldr	r0, [pc, #28]	; (80009cc <DMA1_Channel7_IRQHandler+0x30>)
 80009ae:	f7ff ff59 	bl	8000864 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 80009b2:	bf00      	nop
 80009b4:	4806      	ldr	r0, [pc, #24]	; (80009d0 <DMA1_Channel7_IRQHandler+0x34>)
 80009b6:	f7ff ff84 	bl	80008c2 <LL_USART_IsActiveFlag_TC>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d0f9      	beq.n	80009b4 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 80009c0:	2107      	movs	r1, #7
 80009c2:	4802      	ldr	r0, [pc, #8]	; (80009cc <DMA1_Channel7_IRQHandler+0x30>)
 80009c4:	f7ff fee4 	bl	8000790 <LL_DMA_DisableChannel>
	}
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40004400 	.word	0x40004400

080009d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 80009d8:	4806      	ldr	r0, [pc, #24]	; (80009f4 <USART2_IRQHandler+0x20>)
 80009da:	f7ff ff5f 	bl	800089c <LL_USART_IsActiveFlag_IDLE>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d004      	beq.n	80009ee <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 80009e4:	f000 fe14 	bl	8001610 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <USART2_IRQHandler+0x20>)
 80009ea:	f7ff ff7d 	bl	80008e8 <LL_USART_ClearFlag_IDLE>
	}
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40004400 	.word	0x40004400

080009f8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <TIM2_IRQHandler+0x10>)
 80009fe:	f001 fa87 	bl	8001f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000280 	.word	0x20000280

08000a0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  if(mode){
 8000a10:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <TIM3_IRQHandler+0xb0>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d029      	beq.n	8000a6c <TIM3_IRQHandler+0x60>
	  if(led_State){
 8000a18:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <TIM3_IRQHandler+0xb4>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d012      	beq.n	8000a46 <TIM3_IRQHandler+0x3a>
		  led_Value--;
 8000a20:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <TIM3_IRQHandler+0xb8>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <TIM3_IRQHandler+0xb8>)
 8000a2a:	701a      	strb	r2, [r3, #0]
		  setDutyCycle(led_Value);
 8000a2c:	4b25      	ldr	r3, [pc, #148]	; (8000ac4 <TIM3_IRQHandler+0xb8>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fe73 	bl	800071c <setDutyCycle>
		  if(led_Value==0){
 8000a36:	4b23      	ldr	r3, [pc, #140]	; (8000ac4 <TIM3_IRQHandler+0xb8>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d139      	bne.n	8000ab2 <TIM3_IRQHandler+0xa6>
			  led_State=0;
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <TIM3_IRQHandler+0xb4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
 8000a44:	e035      	b.n	8000ab2 <TIM3_IRQHandler+0xa6>
		  }
	  }
	  else{
		  led_Value++;
 8000a46:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <TIM3_IRQHandler+0xb8>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <TIM3_IRQHandler+0xb8>)
 8000a50:	701a      	strb	r2, [r3, #0]
		  setDutyCycle(led_Value);
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <TIM3_IRQHandler+0xb8>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fe60 	bl	800071c <setDutyCycle>
		  if(led_Value==99){
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <TIM3_IRQHandler+0xb8>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b63      	cmp	r3, #99	; 0x63
 8000a62:	d126      	bne.n	8000ab2 <TIM3_IRQHandler+0xa6>
			  led_State=1;
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <TIM3_IRQHandler+0xb4>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	701a      	strb	r2, [r3, #0]
 8000a6a:	e022      	b.n	8000ab2 <TIM3_IRQHandler+0xa6>
		  }
	  }
  }
  else{
	  if(led_Value>intensity){
 8000a6c:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <TIM3_IRQHandler+0xb8>)
 8000a6e:	781a      	ldrb	r2, [r3, #0]
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <TIM3_IRQHandler+0xbc>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d90b      	bls.n	8000a90 <TIM3_IRQHandler+0x84>
		  led_Value--;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <TIM3_IRQHandler+0xb8>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <TIM3_IRQHandler+0xb8>)
 8000a82:	701a      	strb	r2, [r3, #0]
		  setDutyCycle(led_Value);
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <TIM3_IRQHandler+0xb8>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fe47 	bl	800071c <setDutyCycle>
 8000a8e:	e010      	b.n	8000ab2 <TIM3_IRQHandler+0xa6>
	  }
	  else if(led_Value<intensity){
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <TIM3_IRQHandler+0xb8>)
 8000a92:	781a      	ldrb	r2, [r3, #0]
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <TIM3_IRQHandler+0xbc>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d20a      	bcs.n	8000ab2 <TIM3_IRQHandler+0xa6>
		  led_Value++;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <TIM3_IRQHandler+0xb8>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <TIM3_IRQHandler+0xb8>)
 8000aa6:	701a      	strb	r2, [r3, #0]
		  setDutyCycle(led_Value);
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <TIM3_IRQHandler+0xb8>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fe35 	bl	800071c <setDutyCycle>
	  }
  }

  HAL_TIM_IRQHandler(&htim3);
 8000ab2:	4806      	ldr	r0, [pc, #24]	; (8000acc <TIM3_IRQHandler+0xc0>)
 8000ab4:	f001 fa2c 	bl	8001f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000212 	.word	0x20000212
 8000ac4:	20000213 	.word	0x20000213
 8000ac8:	20000001 	.word	0x20000001
 8000acc:	20000240 	.word	0x20000240

08000ad0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <SystemInit+0x28>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ada:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <SystemInit+0x28>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SystemInit+0x28>)
 8000ae6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aea:	609a      	str	r2, [r3, #8]
#endif
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08e      	sub	sp, #56	; 0x38
 8000b00:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]
 8000b2a:	615a      	str	r2, [r3, #20]
 8000b2c:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000b2e:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <MX_TIM2_Init+0xe8>)
 8000b30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000b36:	4b2b      	ldr	r3, [pc, #172]	; (8000be4 <MX_TIM2_Init+0xe8>)
 8000b38:	f240 321f 	movw	r2, #799	; 0x31f
 8000b3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3e:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <MX_TIM2_Init+0xe8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000b44:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <MX_TIM2_Init+0xe8>)
 8000b46:	2263      	movs	r2, #99	; 0x63
 8000b48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4a:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <MX_TIM2_Init+0xe8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b50:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <MX_TIM2_Init+0xe8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b56:	4823      	ldr	r0, [pc, #140]	; (8000be4 <MX_TIM2_Init+0xe8>)
 8000b58:	f001 f8c8 	bl	8001cec <HAL_TIM_Base_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b62:	f7ff fdea 	bl	800073a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b70:	4619      	mov	r1, r3
 8000b72:	481c      	ldr	r0, [pc, #112]	; (8000be4 <MX_TIM2_Init+0xe8>)
 8000b74:	f001 fc82 	bl	800247c <HAL_TIM_ConfigClockSource>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b7e:	f7ff fddc 	bl	800073a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b82:	4818      	ldr	r0, [pc, #96]	; (8000be4 <MX_TIM2_Init+0xe8>)
 8000b84:	f001 f93d 	bl	8001e02 <HAL_TIM_PWM_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b8e:	f7ff fdd4 	bl	800073a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4810      	ldr	r0, [pc, #64]	; (8000be4 <MX_TIM2_Init+0xe8>)
 8000ba2:	f002 f935 	bl	8002e10 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000bac:	f7ff fdc5 	bl	800073a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bb0:	2360      	movs	r3, #96	; 0x60
 8000bb2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4807      	ldr	r0, [pc, #28]	; (8000be4 <MX_TIM2_Init+0xe8>)
 8000bc8:	f001 fb40 	bl	800224c <HAL_TIM_PWM_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000bd2:	f7ff fdb2 	bl	800073a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000bd6:	4803      	ldr	r0, [pc, #12]	; (8000be4 <MX_TIM2_Init+0xe8>)
 8000bd8:	f000 f8ba 	bl	8000d50 <HAL_TIM_MspPostInit>

}
 8000bdc:	bf00      	nop
 8000bde:	3738      	adds	r7, #56	; 0x38
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000280 	.word	0x20000280

08000be8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08e      	sub	sp, #56	; 0x38
 8000bec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c08:	463b      	mov	r3, r7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
 8000c16:	615a      	str	r2, [r3, #20]
 8000c18:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000c1a:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <MX_TIM3_Init+0xe0>)
 8000c1c:	4a2b      	ldr	r2, [pc, #172]	; (8000ccc <MX_TIM3_Init+0xe4>)
 8000c1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000c20:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <MX_TIM3_Init+0xe0>)
 8000c22:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c28:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <MX_TIM3_Init+0xe0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000c2e:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <MX_TIM3_Init+0xe0>)
 8000c30:	2209      	movs	r2, #9
 8000c32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c34:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <MX_TIM3_Init+0xe0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3a:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <MX_TIM3_Init+0xe0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c40:	4821      	ldr	r0, [pc, #132]	; (8000cc8 <MX_TIM3_Init+0xe0>)
 8000c42:	f001 f853 	bl	8001cec <HAL_TIM_Base_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c4c:	f7ff fd75 	bl	800073a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	481a      	ldr	r0, [pc, #104]	; (8000cc8 <MX_TIM3_Init+0xe0>)
 8000c5e:	f001 fc0d 	bl	800247c <HAL_TIM_ConfigClockSource>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c68:	f7ff fd67 	bl	800073a <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000c6c:	4816      	ldr	r0, [pc, #88]	; (8000cc8 <MX_TIM3_Init+0xe0>)
 8000c6e:	f001 f893 	bl	8001d98 <HAL_TIM_OC_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c78:	f7ff fd5f 	bl	800073a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480f      	ldr	r0, [pc, #60]	; (8000cc8 <MX_TIM3_Init+0xe0>)
 8000c8c:	f002 f8c0 	bl	8002e10 <HAL_TIMEx_MasterConfigSynchronization>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c96:	f7ff fd50 	bl	800073a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000c9a:	2310      	movs	r3, #16
 8000c9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000caa:	463b      	mov	r3, r7
 8000cac:	2200      	movs	r2, #0
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_TIM3_Init+0xe0>)
 8000cb2:	f001 fa4d 	bl	8002150 <HAL_TIM_OC_ConfigChannel>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000cbc:	f7ff fd3d 	bl	800073a <Error_Handler>
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	3738      	adds	r7, #56	; 0x38
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000240 	.word	0x20000240
 8000ccc:	40000400 	.word	0x40000400

08000cd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce0:	d114      	bne.n	8000d0c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <HAL_TIM_Base_MspInit+0x78>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	4a18      	ldr	r2, [pc, #96]	; (8000d48 <HAL_TIM_Base_MspInit+0x78>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	61d3      	str	r3, [r2, #28]
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <HAL_TIM_Base_MspInit+0x78>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	201c      	movs	r0, #28
 8000d00:	f000 fe4b 	bl	800199a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d04:	201c      	movs	r0, #28
 8000d06:	f000 fe64 	bl	80019d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000d0a:	e018      	b.n	8000d3e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_TIM_Base_MspInit+0x7c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d113      	bne.n	8000d3e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_TIM_Base_MspInit+0x78>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <HAL_TIM_Base_MspInit+0x78>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	61d3      	str	r3, [r2, #28]
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <HAL_TIM_Base_MspInit+0x78>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	201d      	movs	r0, #29
 8000d34:	f000 fe31 	bl	800199a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d38:	201d      	movs	r0, #29
 8000d3a:	f000 fe4a 	bl	80019d2 <HAL_NVIC_EnableIRQ>
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40000400 	.word	0x40000400

08000d50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d70:	d11c      	bne.n	8000dac <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <HAL_TIM_MspPostInit+0x64>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <HAL_TIM_MspPostInit+0x64>)
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7c:	6153      	str	r3, [r2, #20]
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <HAL_TIM_MspPostInit+0x64>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d8a:	2320      	movs	r3, #32
 8000d8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	4619      	mov	r1, r3
 8000da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da8:	f000 fe2e 	bl	8001a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000dac:	bf00      	nop
 8000dae:	3720      	adds	r7, #32
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40021000 	.word	0x40021000

08000db8 <__NVIC_EnableIRQ>:
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0b      	blt.n	8000de2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 021f 	and.w	r2, r3, #31
 8000dd0:	4907      	ldr	r1, [pc, #28]	; (8000df0 <__NVIC_EnableIRQ+0x38>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	095b      	lsrs	r3, r3, #5
 8000dd8:	2001      	movs	r0, #1
 8000dda:	fa00 f202 	lsl.w	r2, r0, r2
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	; (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	; (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <LL_DMA_EnableChannel>:
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <LL_DMA_EnableChannel+0x3c>)
 8000e58:	5cd3      	ldrb	r3, [r2, r3]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	3a01      	subs	r2, #1
 8000e66:	4907      	ldr	r1, [pc, #28]	; (8000e84 <LL_DMA_EnableChannel+0x3c>)
 8000e68:	5c8a      	ldrb	r2, [r1, r2]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	440a      	add	r2, r1
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6013      	str	r3, [r2, #0]
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	08003924 	.word	0x08003924

08000e88 <LL_DMA_DisableChannel>:
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <LL_DMA_DisableChannel+0x3c>)
 8000e98:	5cd3      	ldrb	r3, [r2, r3]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	683a      	ldr	r2, [r7, #0]
 8000ea4:	3a01      	subs	r2, #1
 8000ea6:	4907      	ldr	r1, [pc, #28]	; (8000ec4 <LL_DMA_DisableChannel+0x3c>)
 8000ea8:	5c8a      	ldrb	r2, [r1, r2]
 8000eaa:	4611      	mov	r1, r2
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	440a      	add	r2, r1
 8000eb0:	f023 0301 	bic.w	r3, r3, #1
 8000eb4:	6013      	str	r3, [r2, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	08003924 	.word	0x08003924

08000ec8 <LL_DMA_SetDataTransferDirection>:
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <LL_DMA_SetDataTransferDirection+0x48>)
 8000eda:	5cd3      	ldrb	r3, [r2, r3]
 8000edc:	461a      	mov	r2, r3
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ee8:	f023 0310 	bic.w	r3, r3, #16
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	3a01      	subs	r2, #1
 8000ef0:	4907      	ldr	r1, [pc, #28]	; (8000f10 <LL_DMA_SetDataTransferDirection+0x48>)
 8000ef2:	5c8a      	ldrb	r2, [r1, r2]
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	440a      	add	r2, r1
 8000efa:	4611      	mov	r1, r2
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	600b      	str	r3, [r1, #0]
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	08003924 	.word	0x08003924

08000f14 <LL_DMA_GetDataTransferDirection>:
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <LL_DMA_GetDataTransferDirection+0x2c>)
 8000f24:	5cd3      	ldrb	r3, [r2, r3]
 8000f26:	461a      	mov	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	f244 0310 	movw	r3, #16400	; 0x4010
 8000f32:	4013      	ands	r3, r2
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	08003924 	.word	0x08003924

08000f44 <LL_DMA_SetMode>:
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	4a0c      	ldr	r2, [pc, #48]	; (8000f88 <LL_DMA_SetMode+0x44>)
 8000f56:	5cd3      	ldrb	r3, [r2, r3]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f023 0220 	bic.w	r2, r3, #32
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	4907      	ldr	r1, [pc, #28]	; (8000f88 <LL_DMA_SetMode+0x44>)
 8000f6a:	5ccb      	ldrb	r3, [r1, r3]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	440b      	add	r3, r1
 8000f72:	4619      	mov	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	600b      	str	r3, [r1, #0]
}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	08003924 	.word	0x08003924

08000f8c <LL_DMA_SetPeriphIncMode>:
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	4a0c      	ldr	r2, [pc, #48]	; (8000fd0 <LL_DMA_SetPeriphIncMode+0x44>)
 8000f9e:	5cd3      	ldrb	r3, [r2, r3]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	4907      	ldr	r1, [pc, #28]	; (8000fd0 <LL_DMA_SetPeriphIncMode+0x44>)
 8000fb2:	5ccb      	ldrb	r3, [r1, r3]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	440b      	add	r3, r1
 8000fba:	4619      	mov	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	600b      	str	r3, [r1, #0]
}
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	08003924 	.word	0x08003924

08000fd4 <LL_DMA_SetMemoryIncMode>:
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	4a0c      	ldr	r2, [pc, #48]	; (8001018 <LL_DMA_SetMemoryIncMode+0x44>)
 8000fe6:	5cd3      	ldrb	r3, [r2, r3]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	4413      	add	r3, r2
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	4907      	ldr	r1, [pc, #28]	; (8001018 <LL_DMA_SetMemoryIncMode+0x44>)
 8000ffa:	5ccb      	ldrb	r3, [r1, r3]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	440b      	add	r3, r1
 8001002:	4619      	mov	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4313      	orrs	r3, r2
 8001008:	600b      	str	r3, [r1, #0]
}
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	08003924 	.word	0x08003924

0800101c <LL_DMA_SetPeriphSize>:
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	3b01      	subs	r3, #1
 800102c:	4a0c      	ldr	r2, [pc, #48]	; (8001060 <LL_DMA_SetPeriphSize+0x44>)
 800102e:	5cd3      	ldrb	r3, [r2, r3]
 8001030:	461a      	mov	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	3b01      	subs	r3, #1
 8001040:	4907      	ldr	r1, [pc, #28]	; (8001060 <LL_DMA_SetPeriphSize+0x44>)
 8001042:	5ccb      	ldrb	r3, [r1, r3]
 8001044:	4619      	mov	r1, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	440b      	add	r3, r1
 800104a:	4619      	mov	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4313      	orrs	r3, r2
 8001050:	600b      	str	r3, [r1, #0]
}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	08003924 	.word	0x08003924

08001064 <LL_DMA_SetMemorySize>:
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	3b01      	subs	r3, #1
 8001074:	4a0c      	ldr	r2, [pc, #48]	; (80010a8 <LL_DMA_SetMemorySize+0x44>)
 8001076:	5cd3      	ldrb	r3, [r2, r3]
 8001078:	461a      	mov	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4413      	add	r3, r2
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	3b01      	subs	r3, #1
 8001088:	4907      	ldr	r1, [pc, #28]	; (80010a8 <LL_DMA_SetMemorySize+0x44>)
 800108a:	5ccb      	ldrb	r3, [r1, r3]
 800108c:	4619      	mov	r1, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	440b      	add	r3, r1
 8001092:	4619      	mov	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4313      	orrs	r3, r2
 8001098:	600b      	str	r3, [r1, #0]
}
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	08003924 	.word	0x08003924

080010ac <LL_DMA_SetChannelPriorityLevel>:
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80010be:	5cd3      	ldrb	r3, [r2, r3]
 80010c0:	461a      	mov	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4413      	add	r3, r2
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	4907      	ldr	r1, [pc, #28]	; (80010f0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80010d2:	5ccb      	ldrb	r3, [r1, r3]
 80010d4:	4619      	mov	r1, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	440b      	add	r3, r1
 80010da:	4619      	mov	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4313      	orrs	r3, r2
 80010e0:	600b      	str	r3, [r1, #0]
}
 80010e2:	bf00      	nop
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	08003924 	.word	0x08003924

080010f4 <LL_DMA_SetDataLength>:
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	3b01      	subs	r3, #1
 8001104:	4a0c      	ldr	r2, [pc, #48]	; (8001138 <LL_DMA_SetDataLength+0x44>)
 8001106:	5cd3      	ldrb	r3, [r2, r3]
 8001108:	461a      	mov	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4413      	add	r3, r2
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	0c1b      	lsrs	r3, r3, #16
 8001112:	041b      	lsls	r3, r3, #16
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	3a01      	subs	r2, #1
 8001118:	4907      	ldr	r1, [pc, #28]	; (8001138 <LL_DMA_SetDataLength+0x44>)
 800111a:	5c8a      	ldrb	r2, [r1, r2]
 800111c:	4611      	mov	r1, r2
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	440a      	add	r2, r1
 8001122:	4611      	mov	r1, r2
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	4313      	orrs	r3, r2
 8001128:	604b      	str	r3, [r1, #4]
}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	08003924 	.word	0x08003924

0800113c <LL_DMA_GetDataLength>:
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	3b01      	subs	r3, #1
 800114a:	4a06      	ldr	r2, [pc, #24]	; (8001164 <LL_DMA_GetDataLength+0x28>)
 800114c:	5cd3      	ldrb	r3, [r2, r3]
 800114e:	461a      	mov	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4413      	add	r3, r2
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	b29b      	uxth	r3, r3
}
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	08003924 	.word	0x08003924

08001168 <LL_DMA_ConfigAddresses>:
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	2b10      	cmp	r3, #16
 800117a:	d114      	bne.n	80011a6 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	3b01      	subs	r3, #1
 8001180:	4a16      	ldr	r2, [pc, #88]	; (80011dc <LL_DMA_ConfigAddresses+0x74>)
 8001182:	5cd3      	ldrb	r3, [r2, r3]
 8001184:	461a      	mov	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4413      	add	r3, r2
 800118a:	461a      	mov	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	3b01      	subs	r3, #1
 8001194:	4a11      	ldr	r2, [pc, #68]	; (80011dc <LL_DMA_ConfigAddresses+0x74>)
 8001196:	5cd3      	ldrb	r3, [r2, r3]
 8001198:	461a      	mov	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4413      	add	r3, r2
 800119e:	461a      	mov	r2, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	6093      	str	r3, [r2, #8]
}
 80011a4:	e013      	b.n	80011ce <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	4a0c      	ldr	r2, [pc, #48]	; (80011dc <LL_DMA_ConfigAddresses+0x74>)
 80011ac:	5cd3      	ldrb	r3, [r2, r3]
 80011ae:	461a      	mov	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	461a      	mov	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	3b01      	subs	r3, #1
 80011be:	4a07      	ldr	r2, [pc, #28]	; (80011dc <LL_DMA_ConfigAddresses+0x74>)
 80011c0:	5cd3      	ldrb	r3, [r2, r3]
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	461a      	mov	r2, r3
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	60d3      	str	r3, [r2, #12]
}
 80011ce:	bf00      	nop
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	08003924 	.word	0x08003924

080011e0 <LL_DMA_SetPeriphAddress>:
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <LL_DMA_SetPeriphAddress+0x2c>)
 80011f2:	5cd3      	ldrb	r3, [r2, r3]
 80011f4:	461a      	mov	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4413      	add	r3, r2
 80011fa:	461a      	mov	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6093      	str	r3, [r2, #8]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	08003924 	.word	0x08003924

08001210 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	3b01      	subs	r3, #1
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <LL_DMA_EnableIT_TC+0x3c>)
 8001220:	5cd3      	ldrb	r3, [r2, r3]
 8001222:	461a      	mov	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4413      	add	r3, r2
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	3a01      	subs	r2, #1
 800122e:	4907      	ldr	r1, [pc, #28]	; (800124c <LL_DMA_EnableIT_TC+0x3c>)
 8001230:	5c8a      	ldrb	r2, [r1, r2]
 8001232:	4611      	mov	r1, r2
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	440a      	add	r2, r1
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6013      	str	r3, [r2, #0]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	08003924 	.word	0x08003924

08001250 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	3b01      	subs	r3, #1
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <LL_DMA_EnableIT_HT+0x3c>)
 8001260:	5cd3      	ldrb	r3, [r2, r3]
 8001262:	461a      	mov	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	3a01      	subs	r2, #1
 800126e:	4907      	ldr	r1, [pc, #28]	; (800128c <LL_DMA_EnableIT_HT+0x3c>)
 8001270:	5c8a      	ldrb	r2, [r1, r2]
 8001272:	4611      	mov	r1, r2
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	440a      	add	r2, r1
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	6013      	str	r3, [r2, #0]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	08003924 	.word	0x08003924

08001290 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	3b01      	subs	r3, #1
 800129e:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <LL_DMA_EnableIT_TE+0x3c>)
 80012a0:	5cd3      	ldrb	r3, [r2, r3]
 80012a2:	461a      	mov	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4413      	add	r3, r2
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	3a01      	subs	r2, #1
 80012ae:	4907      	ldr	r1, [pc, #28]	; (80012cc <LL_DMA_EnableIT_TE+0x3c>)
 80012b0:	5c8a      	ldrb	r2, [r1, r2]
 80012b2:	4611      	mov	r1, r2
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	440a      	add	r2, r1
 80012b8:	f043 0308 	orr.w	r3, r3, #8
 80012bc:	6013      	str	r3, [r2, #0]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	08003924 	.word	0x08003924

080012d0 <LL_AHB1_GRP1_EnableClock>:
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012da:	695a      	ldr	r2, [r3, #20]
 80012dc:	4907      	ldr	r1, [pc, #28]	; (80012fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012e6:	695a      	ldr	r2, [r3, #20]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4013      	ands	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	40021000 	.word	0x40021000

08001300 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <LL_APB1_GRP1_EnableClock+0x2c>)
 800130a:	69da      	ldr	r2, [r3, #28]
 800130c:	4907      	ldr	r1, [pc, #28]	; (800132c <LL_APB1_GRP1_EnableClock+0x2c>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4313      	orrs	r3, r2
 8001312:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001316:	69da      	ldr	r2, [r3, #28]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4013      	ands	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	40021000 	.word	0x40021000

08001330 <LL_USART_Enable>:
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f043 0201 	orr.w	r2, r3, #1
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	601a      	str	r2, [r3, #0]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_USART_ConfigAsyncMode>:
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	609a      	str	r2, [r3, #8]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f043 0210 	orr.w	r2, r3, #16
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	601a      	str	r2, [r3, #0]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	609a      	str	r2, [r3, #8]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	609a      	str	r2, [r3, #8]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	609a      	str	r2, [r3, #8]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 80013fc:	b490      	push	{r4, r7}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d103      	bne.n	8001414 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3328      	adds	r3, #40	; 0x28
 8001410:	461c      	mov	r4, r3
 8001412:	e002      	b.n	800141a <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3324      	adds	r3, #36	; 0x24
 8001418:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 800141a:	4623      	mov	r3, r4
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bc90      	pop	{r4, r7}
 8001424:	4770      	bx	lr
	...

08001428 <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(const uint8_t* data, uint16_t len) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a03      	ldr	r2, [pc, #12]	; (8001448 <USART2_RegisterCallback+0x20>)
 800143a:	6013      	str	r3, [r2, #0]
	}
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	20000214 	.word	0x20000214

0800144c <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 800144c:	b5b0      	push	{r4, r5, r7, lr}
 800144e:	b090      	sub	sp, #64	; 0x40
 8001450:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]
 8001462:	615a      	str	r2, [r3, #20]
 8001464:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
 8001474:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001476:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800147a:	f7ff ff41 	bl	8001300 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800147e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001482:	f7ff ff25 	bl	80012d0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8001486:	f248 0304 	movw	r3, #32772	; 0x8004
 800148a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800148c:	2302      	movs	r3, #2
 800148e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800149c:	2307      	movs	r3, #7
 800149e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a8:	f001 fe43 	bl	8003132 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2106      	movs	r1, #6
 80014b0:	4854      	ldr	r0, [pc, #336]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 80014b2:	f7ff fd09 	bl	8000ec8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 80014b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ba:	2106      	movs	r1, #6
 80014bc:	4851      	ldr	r0, [pc, #324]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 80014be:	f7ff fdf5 	bl	80010ac <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 80014c2:	2220      	movs	r2, #32
 80014c4:	2106      	movs	r1, #6
 80014c6:	484f      	ldr	r0, [pc, #316]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 80014c8:	f7ff fd3c 	bl	8000f44 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2106      	movs	r1, #6
 80014d0:	484c      	ldr	r0, [pc, #304]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 80014d2:	f7ff fd5b 	bl	8000f8c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80014d6:	2280      	movs	r2, #128	; 0x80
 80014d8:	2106      	movs	r1, #6
 80014da:	484a      	ldr	r0, [pc, #296]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 80014dc:	f7ff fd7a 	bl	8000fd4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2106      	movs	r1, #6
 80014e4:	4847      	ldr	r0, [pc, #284]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 80014e6:	f7ff fd99 	bl	800101c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2106      	movs	r1, #6
 80014ee:	4845      	ldr	r0, [pc, #276]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 80014f0:	f7ff fdb8 	bl	8001064 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 80014f4:	2101      	movs	r1, #1
 80014f6:	4844      	ldr	r0, [pc, #272]	; (8001608 <MX_USART2_UART_Init+0x1bc>)
 80014f8:	f7ff ff80 	bl	80013fc <LL_USART_DMA_GetRegAddr>
 80014fc:	4605      	mov	r5, r0
 80014fe:	4c43      	ldr	r4, [pc, #268]	; (800160c <MX_USART2_UART_Init+0x1c0>)
 8001500:	2106      	movs	r1, #6
 8001502:	4840      	ldr	r0, [pc, #256]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 8001504:	f7ff fd06 	bl	8000f14 <LL_DMA_GetDataTransferDirection>
 8001508:	4603      	mov	r3, r0
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	4623      	mov	r3, r4
 800150e:	462a      	mov	r2, r5
 8001510:	2106      	movs	r1, #6
 8001512:	483c      	ldr	r0, [pc, #240]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 8001514:	f7ff fe28 	bl	8001168 <LL_DMA_ConfigAddresses>
 		  LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
 		  (uint32_t)bufferUSART2dma,
 		  LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

   LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8001518:	f44f 7280 	mov.w	r2, #256	; 0x100
 800151c:	2106      	movs	r1, #6
 800151e:	4839      	ldr	r0, [pc, #228]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 8001520:	f7ff fde8 	bl	80010f4 <LL_DMA_SetDataLength>
   LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001524:	2106      	movs	r1, #6
 8001526:	4837      	ldr	r0, [pc, #220]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 8001528:	f7ff fc8e 	bl	8000e48 <LL_DMA_EnableChannel>
   LL_USART_EnableDMAReq_RX(USART2);
 800152c:	4836      	ldr	r0, [pc, #216]	; (8001608 <MX_USART2_UART_Init+0x1bc>)
 800152e:	f7ff ff45 	bl	80013bc <LL_USART_EnableDMAReq_RX>

   LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8001532:	2106      	movs	r1, #6
 8001534:	4833      	ldr	r0, [pc, #204]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 8001536:	f7ff fe6b 	bl	8001210 <LL_DMA_EnableIT_TC>
   LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 800153a:	2106      	movs	r1, #6
 800153c:	4831      	ldr	r0, [pc, #196]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 800153e:	f7ff fe87 	bl	8001250 <LL_DMA_EnableIT_HT>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001542:	2210      	movs	r2, #16
 8001544:	2107      	movs	r1, #7
 8001546:	482f      	ldr	r0, [pc, #188]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 8001548:	f7ff fcbe 	bl	8000ec8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 800154c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001550:	2107      	movs	r1, #7
 8001552:	482c      	ldr	r0, [pc, #176]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 8001554:	f7ff fdaa 	bl	80010ac <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001558:	2200      	movs	r2, #0
 800155a:	2107      	movs	r1, #7
 800155c:	4829      	ldr	r0, [pc, #164]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 800155e:	f7ff fcf1 	bl	8000f44 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001562:	2200      	movs	r2, #0
 8001564:	2107      	movs	r1, #7
 8001566:	4827      	ldr	r0, [pc, #156]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 8001568:	f7ff fd10 	bl	8000f8c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 800156c:	2280      	movs	r2, #128	; 0x80
 800156e:	2107      	movs	r1, #7
 8001570:	4824      	ldr	r0, [pc, #144]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 8001572:	f7ff fd2f 	bl	8000fd4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8001576:	2200      	movs	r2, #0
 8001578:	2107      	movs	r1, #7
 800157a:	4822      	ldr	r0, [pc, #136]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 800157c:	f7ff fd4e 	bl	800101c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001580:	2200      	movs	r2, #0
 8001582:	2107      	movs	r1, #7
 8001584:	481f      	ldr	r0, [pc, #124]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 8001586:	f7ff fd6d 	bl	8001064 <LL_DMA_SetMemorySize>


  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 800158a:	2100      	movs	r1, #0
 800158c:	481e      	ldr	r0, [pc, #120]	; (8001608 <MX_USART2_UART_Init+0x1bc>)
 800158e:	f7ff ff35 	bl	80013fc <LL_USART_DMA_GetRegAddr>
 8001592:	4603      	mov	r3, r0
 8001594:	461a      	mov	r2, r3
 8001596:	2107      	movs	r1, #7
 8001598:	481a      	ldr	r0, [pc, #104]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 800159a:	f7ff fe21 	bl	80011e0 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 800159e:	481a      	ldr	r0, [pc, #104]	; (8001608 <MX_USART2_UART_Init+0x1bc>)
 80015a0:	f7ff ff1c 	bl	80013dc <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 80015a4:	2107      	movs	r1, #7
 80015a6:	4817      	ldr	r0, [pc, #92]	; (8001604 <MX_USART2_UART_Init+0x1b8>)
 80015a8:	f7ff fe72 	bl	8001290 <LL_DMA_EnableIT_TE>


  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 80015ac:	2100      	movs	r1, #0
 80015ae:	2026      	movs	r0, #38	; 0x26
 80015b0:	f7ff fc20 	bl	8000df4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80015b4:	2026      	movs	r0, #38	; 0x26
 80015b6:	f7ff fbff 	bl	8000db8 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 80015ba:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80015be:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80015cc:	230c      	movs	r3, #12
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80015d4:	2300      	movs	r3, #0
 80015d6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4619      	mov	r1, r3
 80015de:	480a      	ldr	r0, [pc, #40]	; (8001608 <MX_USART2_UART_Init+0x1bc>)
 80015e0:	f002 f824 	bl	800362c <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 80015e4:	4808      	ldr	r0, [pc, #32]	; (8001608 <MX_USART2_UART_Init+0x1bc>)
 80015e6:	f7ff fed9 	bl	800139c <LL_USART_DisableIT_CTS>
  LL_USART_EnableIT_IDLE(USART2);
 80015ea:	4807      	ldr	r0, [pc, #28]	; (8001608 <MX_USART2_UART_Init+0x1bc>)
 80015ec:	f7ff fec6 	bl	800137c <LL_USART_EnableIT_IDLE>
  LL_USART_ConfigAsyncMode(USART2);
 80015f0:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_USART2_UART_Init+0x1bc>)
 80015f2:	f7ff fead 	bl	8001350 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80015f6:	4804      	ldr	r0, [pc, #16]	; (8001608 <MX_USART2_UART_Init+0x1bc>)
 80015f8:	f7ff fe9a 	bl	8001330 <LL_USART_Enable>

}
 80015fc:	bf00      	nop
 80015fe:	3738      	adds	r7, #56	; 0x38
 8001600:	46bd      	mov	sp, r7
 8001602:	bdb0      	pop	{r4, r5, r7, pc}
 8001604:	40020000 	.word	0x40020000
 8001608:	40004400 	.word	0x40004400
 800160c:	200002c0 	.word	0x200002c0

08001610 <USART2_CheckDmaReception>:
 *	Forwards data to callback function.
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */
void USART2_CheckDmaReception(void)
{
 8001610:	b5b0      	push	{r4, r5, r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af02      	add	r7, sp, #8
	if(USART2_ProcessData == 0) return;
 8001616:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <USART2_CheckDmaReception+0xb8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d04f      	beq.n	80016be <USART2_CheckDmaReception+0xae>

	static uint16_t old_pos = 0;

	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 800161e:	2106      	movs	r1, #6
 8001620:	482a      	ldr	r0, [pc, #168]	; (80016cc <USART2_CheckDmaReception+0xbc>)
 8001622:	f7ff fd8b 	bl	800113c <LL_DMA_GetDataLength>
 8001626:	4603      	mov	r3, r0
 8001628:	b29b      	uxth	r3, r3
 800162a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800162e:	80fb      	strh	r3, [r7, #6]

	if (pos != old_pos)
 8001630:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <USART2_CheckDmaReception+0xc0>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	88fa      	ldrh	r2, [r7, #6]
 8001636:	429a      	cmp	r2, r3
 8001638:	d00d      	beq.n	8001656 <USART2_CheckDmaReception+0x46>
	{
		USART2_ProcessData(&bufferUSART2dma[old_pos], (pos - old_pos));
 800163a:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <USART2_CheckDmaReception+0xb8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a24      	ldr	r2, [pc, #144]	; (80016d0 <USART2_CheckDmaReception+0xc0>)
 8001640:	8812      	ldrh	r2, [r2, #0]
 8001642:	4611      	mov	r1, r2
 8001644:	4a23      	ldr	r2, [pc, #140]	; (80016d4 <USART2_CheckDmaReception+0xc4>)
 8001646:	1888      	adds	r0, r1, r2
 8001648:	4a21      	ldr	r2, [pc, #132]	; (80016d0 <USART2_CheckDmaReception+0xc0>)
 800164a:	8812      	ldrh	r2, [r2, #0]
 800164c:	88f9      	ldrh	r1, [r7, #6]
 800164e:	1a8a      	subs	r2, r1, r2
 8001650:	b292      	uxth	r2, r2
 8001652:	4611      	mov	r1, r2
 8001654:	4798      	blx	r3
	}

	old_pos = pos;
 8001656:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <USART2_CheckDmaReception+0xc0>)
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	8013      	strh	r3, [r2, #0]

	if(old_pos>230){
 800165c:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <USART2_CheckDmaReception+0xc0>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	2be6      	cmp	r3, #230	; 0xe6
 8001662:	d92d      	bls.n	80016c0 <USART2_CheckDmaReception+0xb0>
		memset(bufferUSART2dma,'\000',DMA_USART2_BUFFER_SIZE);
 8001664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001668:	2100      	movs	r1, #0
 800166a:	481a      	ldr	r0, [pc, #104]	; (80016d4 <USART2_CheckDmaReception+0xc4>)
 800166c:	f002 f882 	bl	8003774 <memset>

		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001670:	2106      	movs	r1, #6
 8001672:	4816      	ldr	r0, [pc, #88]	; (80016cc <USART2_CheckDmaReception+0xbc>)
 8001674:	f7ff fc08 	bl	8000e88 <LL_DMA_DisableChannel>
					LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8001678:	2101      	movs	r1, #1
 800167a:	4817      	ldr	r0, [pc, #92]	; (80016d8 <USART2_CheckDmaReception+0xc8>)
 800167c:	f7ff febe 	bl	80013fc <LL_USART_DMA_GetRegAddr>
 8001680:	4605      	mov	r5, r0
 8001682:	4c14      	ldr	r4, [pc, #80]	; (80016d4 <USART2_CheckDmaReception+0xc4>)
 8001684:	2106      	movs	r1, #6
 8001686:	4811      	ldr	r0, [pc, #68]	; (80016cc <USART2_CheckDmaReception+0xbc>)
 8001688:	f7ff fc44 	bl	8000f14 <LL_DMA_GetDataTransferDirection>
 800168c:	4603      	mov	r3, r0
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	4623      	mov	r3, r4
 8001692:	462a      	mov	r2, r5
 8001694:	2106      	movs	r1, #6
 8001696:	480d      	ldr	r0, [pc, #52]	; (80016cc <USART2_CheckDmaReception+0xbc>)
 8001698:	f7ff fd66 	bl	8001168 <LL_DMA_ConfigAddresses>
											 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
												(uint32_t)bufferUSART2dma,
												LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));
					 LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 800169c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a0:	2106      	movs	r1, #6
 80016a2:	480a      	ldr	r0, [pc, #40]	; (80016cc <USART2_CheckDmaReception+0xbc>)
 80016a4:	f7ff fd26 	bl	80010f4 <LL_DMA_SetDataLength>
					 LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80016a8:	2106      	movs	r1, #6
 80016aa:	4808      	ldr	r0, [pc, #32]	; (80016cc <USART2_CheckDmaReception+0xbc>)
 80016ac:	f7ff fbcc 	bl	8000e48 <LL_DMA_EnableChannel>
					 LL_USART_EnableDMAReq_RX(USART2);
 80016b0:	4809      	ldr	r0, [pc, #36]	; (80016d8 <USART2_CheckDmaReception+0xc8>)
 80016b2:	f7ff fe83 	bl	80013bc <LL_USART_EnableDMAReq_RX>

		old_pos=0;
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <USART2_CheckDmaReception+0xc0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	801a      	strh	r2, [r3, #0]
 80016bc:	e000      	b.n	80016c0 <USART2_CheckDmaReception+0xb0>
	if(USART2_ProcessData == 0) return;
 80016be:	bf00      	nop
	}
}
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bdb0      	pop	{r4, r5, r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000214 	.word	0x20000214
 80016cc:	40020000 	.word	0x40020000
 80016d0:	20000218 	.word	0x20000218
 80016d4:	200002c0 	.word	0x200002c0
 80016d8:	40004400 	.word	0x40004400

080016dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001714 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016e2:	e003      	b.n	80016ec <LoopCopyDataInit>

080016e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016ea:	3104      	adds	r1, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016ec:	480b      	ldr	r0, [pc, #44]	; (800171c <LoopForever+0xa>)
	ldr	r3, =_edata
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <LoopForever+0xe>)
	adds	r2, r0, r1
 80016f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016f4:	d3f6      	bcc.n	80016e4 <CopyDataInit>
	ldr	r2, =_sbss
 80016f6:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016f8:	e002      	b.n	8001700 <LoopFillZerobss>

080016fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016fc:	f842 3b04 	str.w	r3, [r2], #4

08001700 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <LoopForever+0x16>)
	cmp	r2, r3
 8001702:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001704:	d3f9      	bcc.n	80016fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001706:	f7ff f9e3 	bl	8000ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800170a:	f002 f80f 	bl	800372c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800170e:	f7fe ff07 	bl	8000520 <main>

08001712 <LoopForever>:

LoopForever:
    b LoopForever
 8001712:	e7fe      	b.n	8001712 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001714:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001718:	08003a40 	.word	0x08003a40
	ldr	r0, =_sdata
 800171c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001720:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8001724:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8001728:	200003c4 	.word	0x200003c4

0800172c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800172c:	e7fe      	b.n	800172c <ADC1_2_IRQHandler>
	...

08001730 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_Init+0x28>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <HAL_Init+0x28>)
 800173a:	f043 0310 	orr.w	r3, r3, #16
 800173e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001740:	2003      	movs	r0, #3
 8001742:	f000 f91f 	bl	8001984 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001746:	2000      	movs	r0, #0
 8001748:	f000 f808 	bl	800175c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800174c:	f7fe fffc 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40022000 	.word	0x40022000

0800175c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_InitTick+0x54>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_InitTick+0x58>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001772:	fbb3 f3f1 	udiv	r3, r3, r1
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f937 	bl	80019ee <HAL_SYSTICK_Config>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00e      	b.n	80017a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d80a      	bhi.n	80017a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001790:	2200      	movs	r2, #0
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f000 f8ff 	bl	800199a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800179c:	4a06      	ldr	r2, [pc, #24]	; (80017b8 <HAL_InitTick+0x5c>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000018 	.word	0x20000018
 80017b4:	20000020 	.word	0x20000020
 80017b8:	2000001c 	.word	0x2000001c

080017bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_IncTick+0x20>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_IncTick+0x24>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <HAL_IncTick+0x24>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000020 	.word	0x20000020
 80017e0:	200003c0 	.word	0x200003c0

080017e4 <__NVIC_SetPriorityGrouping>:
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001800:	4013      	ands	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800180c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001816:	4a04      	ldr	r2, [pc, #16]	; (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	60d3      	str	r3, [r2, #12]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_GetPriorityGrouping>:
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <__NVIC_GetPriorityGrouping+0x18>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	f003 0307 	and.w	r3, r3, #7
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_EnableIRQ>:
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	2b00      	cmp	r3, #0
 8001858:	db0b      	blt.n	8001872 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	f003 021f 	and.w	r2, r3, #31
 8001860:	4907      	ldr	r1, [pc, #28]	; (8001880 <__NVIC_EnableIRQ+0x38>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	095b      	lsrs	r3, r3, #5
 8001868:	2001      	movs	r0, #1
 800186a:	fa00 f202 	lsl.w	r2, r0, r2
 800186e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000e100 	.word	0xe000e100

08001884 <__NVIC_SetPriority>:
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	db0a      	blt.n	80018ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	490c      	ldr	r1, [pc, #48]	; (80018d0 <__NVIC_SetPriority+0x4c>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	440b      	add	r3, r1
 80018a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018ac:	e00a      	b.n	80018c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4908      	ldr	r1, [pc, #32]	; (80018d4 <__NVIC_SetPriority+0x50>)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	3b04      	subs	r3, #4
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	440b      	add	r3, r1
 80018c2:	761a      	strb	r2, [r3, #24]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000e100 	.word	0xe000e100
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <NVIC_EncodePriority>:
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f1c3 0307 	rsb	r3, r3, #7
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	bf28      	it	cs
 80018f6:	2304      	movcs	r3, #4
 80018f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3304      	adds	r3, #4
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d902      	bls.n	8001908 <NVIC_EncodePriority+0x30>
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3b03      	subs	r3, #3
 8001906:	e000      	b.n	800190a <NVIC_EncodePriority+0x32>
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43d9      	mvns	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	4313      	orrs	r3, r2
}
 8001932:	4618      	mov	r0, r3
 8001934:	3724      	adds	r7, #36	; 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001950:	d301      	bcc.n	8001956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001952:	2301      	movs	r3, #1
 8001954:	e00f      	b.n	8001976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <SysTick_Config+0x40>)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195e:	210f      	movs	r1, #15
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	f7ff ff8e 	bl	8001884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <SysTick_Config+0x40>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <SysTick_Config+0x40>)
 8001970:	2207      	movs	r2, #7
 8001972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	e000e010 	.word	0xe000e010

08001984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ff29 	bl	80017e4 <__NVIC_SetPriorityGrouping>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ac:	f7ff ff3e 	bl	800182c <__NVIC_GetPriorityGrouping>
 80019b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	6978      	ldr	r0, [r7, #20]
 80019b8:	f7ff ff8e 	bl	80018d8 <NVIC_EncodePriority>
 80019bc:	4602      	mov	r2, r0
 80019be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff5d 	bl	8001884 <__NVIC_SetPriority>
}
 80019ca:	bf00      	nop
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff31 	bl	8001848 <__NVIC_EnableIRQ>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff ffa2 	bl	8001940 <SysTick_Config>
 80019fc:	4603      	mov	r3, r0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a16:	e14e      	b.n	8001cb6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	4013      	ands	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 8140 	beq.w	8001cb0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d00b      	beq.n	8001a50 <HAL_GPIO_Init+0x48>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d007      	beq.n	8001a50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a44:	2b11      	cmp	r3, #17
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b12      	cmp	r3, #18
 8001a4e:	d130      	bne.n	8001ab2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a86:	2201      	movs	r2, #1
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	091b      	lsrs	r3, r3, #4
 8001a9c:	f003 0201 	and.w	r2, r3, #1
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	2203      	movs	r2, #3
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_Init+0xea>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b12      	cmp	r3, #18
 8001af0:	d123      	bne.n	8001b3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	08da      	lsrs	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3208      	adds	r2, #8
 8001afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	220f      	movs	r2, #15
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	691a      	ldr	r2, [r3, #16]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	08da      	lsrs	r2, r3, #3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3208      	adds	r2, #8
 8001b34:	6939      	ldr	r1, [r7, #16]
 8001b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	2203      	movs	r2, #3
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0203 	and.w	r2, r3, #3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 809a 	beq.w	8001cb0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7c:	4b55      	ldr	r3, [pc, #340]	; (8001cd4 <HAL_GPIO_Init+0x2cc>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a54      	ldr	r2, [pc, #336]	; (8001cd4 <HAL_GPIO_Init+0x2cc>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	4b52      	ldr	r3, [pc, #328]	; (8001cd4 <HAL_GPIO_Init+0x2cc>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b94:	4a50      	ldr	r2, [pc, #320]	; (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	089b      	lsrs	r3, r3, #2
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	220f      	movs	r2, #15
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bbe:	d013      	beq.n	8001be8 <HAL_GPIO_Init+0x1e0>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a46      	ldr	r2, [pc, #280]	; (8001cdc <HAL_GPIO_Init+0x2d4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d00d      	beq.n	8001be4 <HAL_GPIO_Init+0x1dc>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a45      	ldr	r2, [pc, #276]	; (8001ce0 <HAL_GPIO_Init+0x2d8>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d007      	beq.n	8001be0 <HAL_GPIO_Init+0x1d8>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a44      	ldr	r2, [pc, #272]	; (8001ce4 <HAL_GPIO_Init+0x2dc>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d101      	bne.n	8001bdc <HAL_GPIO_Init+0x1d4>
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e006      	b.n	8001bea <HAL_GPIO_Init+0x1e2>
 8001bdc:	2305      	movs	r3, #5
 8001bde:	e004      	b.n	8001bea <HAL_GPIO_Init+0x1e2>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e002      	b.n	8001bea <HAL_GPIO_Init+0x1e2>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <HAL_GPIO_Init+0x1e2>
 8001be8:	2300      	movs	r3, #0
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	f002 0203 	and.w	r2, r2, #3
 8001bf0:	0092      	lsls	r2, r2, #2
 8001bf2:	4093      	lsls	r3, r2
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bfa:	4937      	ldr	r1, [pc, #220]	; (8001cd8 <HAL_GPIO_Init+0x2d0>)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	3302      	adds	r3, #2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c08:	4b37      	ldr	r3, [pc, #220]	; (8001ce8 <HAL_GPIO_Init+0x2e0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c2c:	4a2e      	ldr	r2, [pc, #184]	; (8001ce8 <HAL_GPIO_Init+0x2e0>)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c32:	4b2d      	ldr	r3, [pc, #180]	; (8001ce8 <HAL_GPIO_Init+0x2e0>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c56:	4a24      	ldr	r2, [pc, #144]	; (8001ce8 <HAL_GPIO_Init+0x2e0>)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c5c:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <HAL_GPIO_Init+0x2e0>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c80:	4a19      	ldr	r2, [pc, #100]	; (8001ce8 <HAL_GPIO_Init+0x2e0>)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c86:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <HAL_GPIO_Init+0x2e0>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001caa:	4a0f      	ldr	r2, [pc, #60]	; (8001ce8 <HAL_GPIO_Init+0x2e0>)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f47f aea9 	bne.w	8001a18 <HAL_GPIO_Init+0x10>
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	371c      	adds	r7, #28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010000 	.word	0x40010000
 8001cdc:	48000400 	.word	0x48000400
 8001ce0:	48000800 	.word	0x48000800
 8001ce4:	48000c00 	.word	0x48000c00
 8001ce8:	40010400 	.word	0x40010400

08001cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e01d      	b.n	8001d3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7fe ffdc 	bl	8000cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3304      	adds	r3, #4
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	f000 fc92 	bl	8002654 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <HAL_TIM_Base_Start_IT+0x50>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d00b      	beq.n	8001d86 <HAL_TIM_Base_Start_IT+0x42>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d74:	d007      	beq.n	8001d86 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 0201 	orr.w	r2, r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	00010007 	.word	0x00010007

08001d98 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e01d      	b.n	8001de6 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d106      	bne.n	8001dc4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f815 	bl	8001dee <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	f000 fc3c 	bl	8002654 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e01d      	b.n	8001e50 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d106      	bne.n	8001e2e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f815 	bl	8001e58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2202      	movs	r2, #2
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4610      	mov	r0, r2
 8001e42:	f000 fc07 	bl	8002654 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	6839      	ldr	r1, [r7, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 ffa0 	bl	8002dc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <HAL_TIM_PWM_Start+0x90>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00e      	beq.n	8001eac <HAL_TIM_PWM_Start+0x40>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1b      	ldr	r2, [pc, #108]	; (8001f00 <HAL_TIM_PWM_Start+0x94>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d009      	beq.n	8001eac <HAL_TIM_PWM_Start+0x40>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a19      	ldr	r2, [pc, #100]	; (8001f04 <HAL_TIM_PWM_Start+0x98>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d004      	beq.n	8001eac <HAL_TIM_PWM_Start+0x40>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a18      	ldr	r2, [pc, #96]	; (8001f08 <HAL_TIM_PWM_Start+0x9c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d101      	bne.n	8001eb0 <HAL_TIM_PWM_Start+0x44>
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <HAL_TIM_PWM_Start+0x46>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d007      	beq.n	8001ec6 <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <HAL_TIM_PWM_Start+0xa0>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2b06      	cmp	r3, #6
 8001ed6:	d00b      	beq.n	8001ef0 <HAL_TIM_PWM_Start+0x84>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ede:	d007      	beq.n	8001ef0 <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40012c00 	.word	0x40012c00
 8001f00:	40014000 	.word	0x40014000
 8001f04:	40014400 	.word	0x40014400
 8001f08:	40014800 	.word	0x40014800
 8001f0c:	00010007 	.word	0x00010007

08001f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d122      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d11b      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0202 	mvn.w	r2, #2
 8001f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 fb5f 	bl	8002616 <HAL_TIM_IC_CaptureCallback>
 8001f58:	e005      	b.n	8001f66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fb51 	bl	8002602 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 fb62 	bl	800262a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d122      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d11b      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0204 	mvn.w	r2, #4
 8001f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2202      	movs	r2, #2
 8001f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 fb35 	bl	8002616 <HAL_TIM_IC_CaptureCallback>
 8001fac:	e005      	b.n	8001fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 fb27 	bl	8002602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 fb38 	bl	800262a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d122      	bne.n	8002014 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d11b      	bne.n	8002014 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0208 	mvn.w	r2, #8
 8001fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2204      	movs	r2, #4
 8001fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 fb0b 	bl	8002616 <HAL_TIM_IC_CaptureCallback>
 8002000:	e005      	b.n	800200e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 fafd 	bl	8002602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 fb0e 	bl	800262a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b10      	cmp	r3, #16
 8002020:	d122      	bne.n	8002068 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0310 	and.w	r3, r3, #16
 800202c:	2b10      	cmp	r3, #16
 800202e:	d11b      	bne.n	8002068 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0210 	mvn.w	r2, #16
 8002038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2208      	movs	r2, #8
 800203e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fae1 	bl	8002616 <HAL_TIM_IC_CaptureCallback>
 8002054:	e005      	b.n	8002062 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 fad3 	bl	8002602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 fae4 	bl	800262a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b01      	cmp	r3, #1
 8002074:	d10e      	bne.n	8002094 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b01      	cmp	r3, #1
 8002082:	d107      	bne.n	8002094 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0201 	mvn.w	r2, #1
 800208c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 faad 	bl	80025ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209e:	2b80      	cmp	r3, #128	; 0x80
 80020a0:	d10e      	bne.n	80020c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ac:	2b80      	cmp	r3, #128	; 0x80
 80020ae:	d107      	bne.n	80020c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 ff20 	bl	8002f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ce:	d10e      	bne.n	80020ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020da:	2b80      	cmp	r3, #128	; 0x80
 80020dc:	d107      	bne.n	80020ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80020e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 ff13 	bl	8002f14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f8:	2b40      	cmp	r3, #64	; 0x40
 80020fa:	d10e      	bne.n	800211a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002106:	2b40      	cmp	r3, #64	; 0x40
 8002108:	d107      	bne.n	800211a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 fa92 	bl	800263e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b20      	cmp	r3, #32
 8002126:	d10e      	bne.n	8002146 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f003 0320 	and.w	r3, r3, #32
 8002132:	2b20      	cmp	r3, #32
 8002134:	d107      	bne.n	8002146 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f06f 0220 	mvn.w	r2, #32
 800213e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 fed3 	bl	8002eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_TIM_OC_ConfigChannel+0x1a>
 8002166:	2302      	movs	r3, #2
 8002168:	e06c      	b.n	8002244 <HAL_TIM_OC_ConfigChannel+0xf4>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2202      	movs	r2, #2
 8002176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b14      	cmp	r3, #20
 800217e:	d857      	bhi.n	8002230 <HAL_TIM_OC_ConfigChannel+0xe0>
 8002180:	a201      	add	r2, pc, #4	; (adr r2, 8002188 <HAL_TIM_OC_ConfigChannel+0x38>)
 8002182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002186:	bf00      	nop
 8002188:	080021dd 	.word	0x080021dd
 800218c:	08002231 	.word	0x08002231
 8002190:	08002231 	.word	0x08002231
 8002194:	08002231 	.word	0x08002231
 8002198:	080021eb 	.word	0x080021eb
 800219c:	08002231 	.word	0x08002231
 80021a0:	08002231 	.word	0x08002231
 80021a4:	08002231 	.word	0x08002231
 80021a8:	080021f9 	.word	0x080021f9
 80021ac:	08002231 	.word	0x08002231
 80021b0:	08002231 	.word	0x08002231
 80021b4:	08002231 	.word	0x08002231
 80021b8:	08002207 	.word	0x08002207
 80021bc:	08002231 	.word	0x08002231
 80021c0:	08002231 	.word	0x08002231
 80021c4:	08002231 	.word	0x08002231
 80021c8:	08002215 	.word	0x08002215
 80021cc:	08002231 	.word	0x08002231
 80021d0:	08002231 	.word	0x08002231
 80021d4:	08002231 	.word	0x08002231
 80021d8:	08002223 	.word	0x08002223
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 faae 	bl	8002744 <TIM_OC1_SetConfig>
      break;
 80021e8:	e023      	b.n	8002232 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68b9      	ldr	r1, [r7, #8]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 fb2d 	bl	8002850 <TIM_OC2_SetConfig>
      break;
 80021f6:	e01c      	b.n	8002232 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fba6 	bl	8002950 <TIM_OC3_SetConfig>
      break;
 8002204:	e015      	b.n	8002232 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fc1d 	bl	8002a4c <TIM_OC4_SetConfig>
      break;
 8002212:	e00e      	b.n	8002232 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	4618      	mov	r0, r3
 800221c:	f000 fc7a 	bl	8002b14 <TIM_OC5_SetConfig>
      break;
 8002220:	e007      	b.n	8002232 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68b9      	ldr	r1, [r7, #8]
 8002228:	4618      	mov	r0, r3
 800222a:	f000 fcd1 	bl	8002bd0 <TIM_OC6_SetConfig>
      break;
 800222e:	e000      	b.n	8002232 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8002230:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002262:	2302      	movs	r3, #2
 8002264:	e105      	b.n	8002472 <HAL_TIM_PWM_ConfigChannel+0x226>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2202      	movs	r2, #2
 8002272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b14      	cmp	r3, #20
 800227a:	f200 80f0 	bhi.w	800245e <HAL_TIM_PWM_ConfigChannel+0x212>
 800227e:	a201      	add	r2, pc, #4	; (adr r2, 8002284 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002284:	080022d9 	.word	0x080022d9
 8002288:	0800245f 	.word	0x0800245f
 800228c:	0800245f 	.word	0x0800245f
 8002290:	0800245f 	.word	0x0800245f
 8002294:	08002319 	.word	0x08002319
 8002298:	0800245f 	.word	0x0800245f
 800229c:	0800245f 	.word	0x0800245f
 80022a0:	0800245f 	.word	0x0800245f
 80022a4:	0800235b 	.word	0x0800235b
 80022a8:	0800245f 	.word	0x0800245f
 80022ac:	0800245f 	.word	0x0800245f
 80022b0:	0800245f 	.word	0x0800245f
 80022b4:	0800239b 	.word	0x0800239b
 80022b8:	0800245f 	.word	0x0800245f
 80022bc:	0800245f 	.word	0x0800245f
 80022c0:	0800245f 	.word	0x0800245f
 80022c4:	080023dd 	.word	0x080023dd
 80022c8:	0800245f 	.word	0x0800245f
 80022cc:	0800245f 	.word	0x0800245f
 80022d0:	0800245f 	.word	0x0800245f
 80022d4:	0800241d 	.word	0x0800241d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fa30 	bl	8002744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699a      	ldr	r2, [r3, #24]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0208 	orr.w	r2, r2, #8
 80022f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699a      	ldr	r2, [r3, #24]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0204 	bic.w	r2, r2, #4
 8002302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6999      	ldr	r1, [r3, #24]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	691a      	ldr	r2, [r3, #16]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	619a      	str	r2, [r3, #24]
      break;
 8002316:	e0a3      	b.n	8002460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fa96 	bl	8002850 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699a      	ldr	r2, [r3, #24]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6999      	ldr	r1, [r3, #24]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	021a      	lsls	r2, r3, #8
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	619a      	str	r2, [r3, #24]
      break;
 8002358:	e082      	b.n	8002460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	4618      	mov	r0, r3
 8002362:	f000 faf5 	bl	8002950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	69da      	ldr	r2, [r3, #28]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f042 0208 	orr.w	r2, r2, #8
 8002374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	69da      	ldr	r2, [r3, #28]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0204 	bic.w	r2, r2, #4
 8002384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	69d9      	ldr	r1, [r3, #28]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	61da      	str	r2, [r3, #28]
      break;
 8002398:	e062      	b.n	8002460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68b9      	ldr	r1, [r7, #8]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fb53 	bl	8002a4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	69da      	ldr	r2, [r3, #28]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69da      	ldr	r2, [r3, #28]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	69d9      	ldr	r1, [r3, #28]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	021a      	lsls	r2, r3, #8
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	61da      	str	r2, [r3, #28]
      break;
 80023da:	e041      	b.n	8002460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fb96 	bl	8002b14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0208 	orr.w	r2, r2, #8
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0204 	bic.w	r2, r2, #4
 8002406:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800241a:	e021      	b.n	8002460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	4618      	mov	r0, r3
 8002424:	f000 fbd4 	bl	8002bd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002436:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002446:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	021a      	lsls	r2, r3, #8
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800245c:	e000      	b.n	8002460 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 800245e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop

0800247c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_TIM_ConfigClockSource+0x18>
 8002490:	2302      	movs	r3, #2
 8002492:	e0a8      	b.n	80025e6 <HAL_TIM_ConfigClockSource+0x16a>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b40      	cmp	r3, #64	; 0x40
 80024ce:	d067      	beq.n	80025a0 <HAL_TIM_ConfigClockSource+0x124>
 80024d0:	2b40      	cmp	r3, #64	; 0x40
 80024d2:	d80b      	bhi.n	80024ec <HAL_TIM_ConfigClockSource+0x70>
 80024d4:	2b10      	cmp	r3, #16
 80024d6:	d073      	beq.n	80025c0 <HAL_TIM_ConfigClockSource+0x144>
 80024d8:	2b10      	cmp	r3, #16
 80024da:	d802      	bhi.n	80024e2 <HAL_TIM_ConfigClockSource+0x66>
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d06f      	beq.n	80025c0 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80024e0:	e078      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80024e2:	2b20      	cmp	r3, #32
 80024e4:	d06c      	beq.n	80025c0 <HAL_TIM_ConfigClockSource+0x144>
 80024e6:	2b30      	cmp	r3, #48	; 0x30
 80024e8:	d06a      	beq.n	80025c0 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80024ea:	e073      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80024ec:	2b70      	cmp	r3, #112	; 0x70
 80024ee:	d00d      	beq.n	800250c <HAL_TIM_ConfigClockSource+0x90>
 80024f0:	2b70      	cmp	r3, #112	; 0x70
 80024f2:	d804      	bhi.n	80024fe <HAL_TIM_ConfigClockSource+0x82>
 80024f4:	2b50      	cmp	r3, #80	; 0x50
 80024f6:	d033      	beq.n	8002560 <HAL_TIM_ConfigClockSource+0xe4>
 80024f8:	2b60      	cmp	r3, #96	; 0x60
 80024fa:	d041      	beq.n	8002580 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80024fc:	e06a      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80024fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002502:	d066      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x156>
 8002504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002508:	d017      	beq.n	800253a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800250a:	e063      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	6899      	ldr	r1, [r3, #8]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f000 fc32 	bl	8002d84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800252e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	609a      	str	r2, [r3, #8]
      break;
 8002538:	e04c      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6899      	ldr	r1, [r3, #8]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f000 fc1b 	bl	8002d84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800255c:	609a      	str	r2, [r3, #8]
      break;
 800255e:	e039      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	461a      	mov	r2, r3
 800256e:	f000 fb8f 	bl	8002c90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2150      	movs	r1, #80	; 0x50
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fbe8 	bl	8002d4e <TIM_ITRx_SetConfig>
      break;
 800257e:	e029      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6859      	ldr	r1, [r3, #4]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	461a      	mov	r2, r3
 800258e:	f000 fbae 	bl	8002cee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2160      	movs	r1, #96	; 0x60
 8002598:	4618      	mov	r0, r3
 800259a:	f000 fbd8 	bl	8002d4e <TIM_ITRx_SetConfig>
      break;
 800259e:	e019      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6818      	ldr	r0, [r3, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	6859      	ldr	r1, [r3, #4]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	461a      	mov	r2, r3
 80025ae:	f000 fb6f 	bl	8002c90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2140      	movs	r1, #64	; 0x40
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 fbc8 	bl	8002d4e <TIM_ITRx_SetConfig>
      break;
 80025be:	e009      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4619      	mov	r1, r3
 80025ca:	4610      	mov	r0, r2
 80025cc:	f000 fbbf 	bl	8002d4e <TIM_ITRx_SetConfig>
      break;
 80025d0:	e000      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80025d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a32      	ldr	r2, [pc, #200]	; (8002730 <TIM_Base_SetConfig+0xdc>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d007      	beq.n	800267c <TIM_Base_SetConfig+0x28>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002672:	d003      	beq.n	800267c <TIM_Base_SetConfig+0x28>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a2f      	ldr	r2, [pc, #188]	; (8002734 <TIM_Base_SetConfig+0xe0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d108      	bne.n	800268e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a27      	ldr	r2, [pc, #156]	; (8002730 <TIM_Base_SetConfig+0xdc>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <TIM_Base_SetConfig+0x6a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269c:	d00f      	beq.n	80026be <TIM_Base_SetConfig+0x6a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a24      	ldr	r2, [pc, #144]	; (8002734 <TIM_Base_SetConfig+0xe0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00b      	beq.n	80026be <TIM_Base_SetConfig+0x6a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a23      	ldr	r2, [pc, #140]	; (8002738 <TIM_Base_SetConfig+0xe4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d007      	beq.n	80026be <TIM_Base_SetConfig+0x6a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a22      	ldr	r2, [pc, #136]	; (800273c <TIM_Base_SetConfig+0xe8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d003      	beq.n	80026be <TIM_Base_SetConfig+0x6a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a21      	ldr	r2, [pc, #132]	; (8002740 <TIM_Base_SetConfig+0xec>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d108      	bne.n	80026d0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a0e      	ldr	r2, [pc, #56]	; (8002730 <TIM_Base_SetConfig+0xdc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d00b      	beq.n	8002714 <TIM_Base_SetConfig+0xc0>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <TIM_Base_SetConfig+0xe4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d007      	beq.n	8002714 <TIM_Base_SetConfig+0xc0>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a0d      	ldr	r2, [pc, #52]	; (800273c <TIM_Base_SetConfig+0xe8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d003      	beq.n	8002714 <TIM_Base_SetConfig+0xc0>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a0c      	ldr	r2, [pc, #48]	; (8002740 <TIM_Base_SetConfig+0xec>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d103      	bne.n	800271c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	615a      	str	r2, [r3, #20]
}
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40012c00 	.word	0x40012c00
 8002734:	40000400 	.word	0x40000400
 8002738:	40014000 	.word	0x40014000
 800273c:	40014400 	.word	0x40014400
 8002740:	40014800 	.word	0x40014800

08002744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002744:	b480      	push	{r7}
 8002746:	b087      	sub	sp, #28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	f023 0201 	bic.w	r2, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0303 	bic.w	r3, r3, #3
 800277e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f023 0302 	bic.w	r3, r3, #2
 8002790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a28      	ldr	r2, [pc, #160]	; (8002840 <TIM_OC1_SetConfig+0xfc>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00b      	beq.n	80027bc <TIM_OC1_SetConfig+0x78>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a27      	ldr	r2, [pc, #156]	; (8002844 <TIM_OC1_SetConfig+0x100>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d007      	beq.n	80027bc <TIM_OC1_SetConfig+0x78>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a26      	ldr	r2, [pc, #152]	; (8002848 <TIM_OC1_SetConfig+0x104>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d003      	beq.n	80027bc <TIM_OC1_SetConfig+0x78>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a25      	ldr	r2, [pc, #148]	; (800284c <TIM_OC1_SetConfig+0x108>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d10c      	bne.n	80027d6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f023 0308 	bic.w	r3, r3, #8
 80027c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f023 0304 	bic.w	r3, r3, #4
 80027d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a19      	ldr	r2, [pc, #100]	; (8002840 <TIM_OC1_SetConfig+0xfc>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00b      	beq.n	80027f6 <TIM_OC1_SetConfig+0xb2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a18      	ldr	r2, [pc, #96]	; (8002844 <TIM_OC1_SetConfig+0x100>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d007      	beq.n	80027f6 <TIM_OC1_SetConfig+0xb2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a17      	ldr	r2, [pc, #92]	; (8002848 <TIM_OC1_SetConfig+0x104>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d003      	beq.n	80027f6 <TIM_OC1_SetConfig+0xb2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a16      	ldr	r2, [pc, #88]	; (800284c <TIM_OC1_SetConfig+0x108>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d111      	bne.n	800281a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	621a      	str	r2, [r3, #32]
}
 8002834:	bf00      	nop
 8002836:	371c      	adds	r7, #28
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	40012c00 	.word	0x40012c00
 8002844:	40014000 	.word	0x40014000
 8002848:	40014400 	.word	0x40014400
 800284c:	40014800 	.word	0x40014800

08002850 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	f023 0210 	bic.w	r2, r3, #16
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800287e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800288a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	021b      	lsls	r3, r3, #8
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	4313      	orrs	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f023 0320 	bic.w	r3, r3, #32
 800289e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a24      	ldr	r2, [pc, #144]	; (8002940 <TIM_OC2_SetConfig+0xf0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d10d      	bne.n	80028d0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a1b      	ldr	r2, [pc, #108]	; (8002940 <TIM_OC2_SetConfig+0xf0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00b      	beq.n	80028f0 <TIM_OC2_SetConfig+0xa0>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <TIM_OC2_SetConfig+0xf4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d007      	beq.n	80028f0 <TIM_OC2_SetConfig+0xa0>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a19      	ldr	r2, [pc, #100]	; (8002948 <TIM_OC2_SetConfig+0xf8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d003      	beq.n	80028f0 <TIM_OC2_SetConfig+0xa0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a18      	ldr	r2, [pc, #96]	; (800294c <TIM_OC2_SetConfig+0xfc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d113      	bne.n	8002918 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028f6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028fe:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	621a      	str	r2, [r3, #32]
}
 8002932:	bf00      	nop
 8002934:	371c      	adds	r7, #28
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40012c00 	.word	0x40012c00
 8002944:	40014000 	.word	0x40014000
 8002948:	40014400 	.word	0x40014400
 800294c:	40014800 	.word	0x40014800

08002950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800297e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f023 0303 	bic.w	r3, r3, #3
 800298a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800299c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a23      	ldr	r2, [pc, #140]	; (8002a3c <TIM_OC3_SetConfig+0xec>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d10d      	bne.n	80029ce <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	021b      	lsls	r3, r3, #8
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029cc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a1a      	ldr	r2, [pc, #104]	; (8002a3c <TIM_OC3_SetConfig+0xec>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00b      	beq.n	80029ee <TIM_OC3_SetConfig+0x9e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a19      	ldr	r2, [pc, #100]	; (8002a40 <TIM_OC3_SetConfig+0xf0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d007      	beq.n	80029ee <TIM_OC3_SetConfig+0x9e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a18      	ldr	r2, [pc, #96]	; (8002a44 <TIM_OC3_SetConfig+0xf4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d003      	beq.n	80029ee <TIM_OC3_SetConfig+0x9e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <TIM_OC3_SetConfig+0xf8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d113      	bne.n	8002a16 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	621a      	str	r2, [r3, #32]
}
 8002a30:	bf00      	nop
 8002a32:	371c      	adds	r7, #28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	40012c00 	.word	0x40012c00
 8002a40:	40014000 	.word	0x40014000
 8002a44:	40014400 	.word	0x40014400
 8002a48:	40014800 	.word	0x40014800

08002a4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	031b      	lsls	r3, r3, #12
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a16      	ldr	r2, [pc, #88]	; (8002b04 <TIM_OC4_SetConfig+0xb8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d00b      	beq.n	8002ac8 <TIM_OC4_SetConfig+0x7c>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a15      	ldr	r2, [pc, #84]	; (8002b08 <TIM_OC4_SetConfig+0xbc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d007      	beq.n	8002ac8 <TIM_OC4_SetConfig+0x7c>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <TIM_OC4_SetConfig+0xc0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d003      	beq.n	8002ac8 <TIM_OC4_SetConfig+0x7c>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a13      	ldr	r2, [pc, #76]	; (8002b10 <TIM_OC4_SetConfig+0xc4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d109      	bne.n	8002adc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ace:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	019b      	lsls	r3, r3, #6
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	621a      	str	r2, [r3, #32]
}
 8002af6:	bf00      	nop
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40012c00 	.word	0x40012c00
 8002b08:	40014000 	.word	0x40014000
 8002b0c:	40014400 	.word	0x40014400
 8002b10:	40014800 	.word	0x40014800

08002b14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002b58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	041b      	lsls	r3, r3, #16
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a15      	ldr	r2, [pc, #84]	; (8002bc0 <TIM_OC5_SetConfig+0xac>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00b      	beq.n	8002b86 <TIM_OC5_SetConfig+0x72>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <TIM_OC5_SetConfig+0xb0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d007      	beq.n	8002b86 <TIM_OC5_SetConfig+0x72>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a13      	ldr	r2, [pc, #76]	; (8002bc8 <TIM_OC5_SetConfig+0xb4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d003      	beq.n	8002b86 <TIM_OC5_SetConfig+0x72>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a12      	ldr	r2, [pc, #72]	; (8002bcc <TIM_OC5_SetConfig+0xb8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d109      	bne.n	8002b9a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	021b      	lsls	r3, r3, #8
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	621a      	str	r2, [r3, #32]
}
 8002bb4:	bf00      	nop
 8002bb6:	371c      	adds	r7, #28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	40012c00 	.word	0x40012c00
 8002bc4:	40014000 	.word	0x40014000
 8002bc8:	40014400 	.word	0x40014400
 8002bcc:	40014800 	.word	0x40014800

08002bd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	051b      	lsls	r3, r3, #20
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a16      	ldr	r2, [pc, #88]	; (8002c80 <TIM_OC6_SetConfig+0xb0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00b      	beq.n	8002c44 <TIM_OC6_SetConfig+0x74>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a15      	ldr	r2, [pc, #84]	; (8002c84 <TIM_OC6_SetConfig+0xb4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d007      	beq.n	8002c44 <TIM_OC6_SetConfig+0x74>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <TIM_OC6_SetConfig+0xb8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d003      	beq.n	8002c44 <TIM_OC6_SetConfig+0x74>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a13      	ldr	r2, [pc, #76]	; (8002c8c <TIM_OC6_SetConfig+0xbc>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d109      	bne.n	8002c58 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	029b      	lsls	r3, r3, #10
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	621a      	str	r2, [r3, #32]
}
 8002c72:	bf00      	nop
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40012c00 	.word	0x40012c00
 8002c84:	40014000 	.word	0x40014000
 8002c88:	40014400 	.word	0x40014400
 8002c8c:	40014800 	.word	0x40014800

08002c90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f023 0201 	bic.w	r2, r3, #1
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f023 030a 	bic.w	r3, r3, #10
 8002ccc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	621a      	str	r2, [r3, #32]
}
 8002ce2:	bf00      	nop
 8002ce4:	371c      	adds	r7, #28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b087      	sub	sp, #28
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	f023 0210 	bic.w	r2, r3, #16
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	031b      	lsls	r3, r3, #12
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	621a      	str	r2, [r3, #32]
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b085      	sub	sp, #20
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f043 0307 	orr.w	r3, r3, #7
 8002d70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	609a      	str	r2, [r3, #8]
}
 8002d78:	bf00      	nop
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	021a      	lsls	r2, r3, #8
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	609a      	str	r2, [r3, #8]
}
 8002db8:	bf00      	nop
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f003 031f 	and.w	r3, r3, #31
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a1a      	ldr	r2, [r3, #32]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	43db      	mvns	r3, r3
 8002de6:	401a      	ands	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a1a      	ldr	r2, [r3, #32]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	621a      	str	r2, [r3, #32]
}
 8002e02:	bf00      	nop
 8002e04:	371c      	adds	r7, #28
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
	...

08002e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e054      	b.n	8002ed2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a24      	ldr	r2, [pc, #144]	; (8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d108      	bne.n	8002e64 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a17      	ldr	r2, [pc, #92]	; (8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00e      	beq.n	8002ea6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e90:	d009      	beq.n	8002ea6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a13      	ldr	r2, [pc, #76]	; (8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d004      	beq.n	8002ea6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a11      	ldr	r2, [pc, #68]	; (8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40012c00 	.word	0x40012c00
 8002ee4:	40000400 	.word	0x40000400
 8002ee8:	40014000 	.word	0x40014000

08002eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b089      	sub	sp, #36	; 0x24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	2103      	movs	r1, #3
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	401a      	ands	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	fa93 f3a3 	rbit	r3, r3
 8002f62:	61bb      	str	r3, [r7, #24]
  return result;
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	fa01 f303 	lsl.w	r3, r1, r3
 8002f74:	431a      	orrs	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	601a      	str	r2, [r3, #0]
}
 8002f7a:	bf00      	nop
 8002f7c:	3724      	adds	r7, #36	; 0x24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b085      	sub	sp, #20
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	60f8      	str	r0, [r7, #12]
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	605a      	str	r2, [r3, #4]
}
 8002faa:	bf00      	nop
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b089      	sub	sp, #36	; 0x24
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	613b      	str	r3, [r7, #16]
  return result;
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	fab3 f383 	clz	r3, r3
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	2103      	movs	r1, #3
 8002fde:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	401a      	ands	r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	61bb      	str	r3, [r7, #24]
  return result;
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	fab3 f383 	clz	r3, r3
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8003002:	431a      	orrs	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8003008:	bf00      	nop
 800300a:	3724      	adds	r7, #36	; 0x24
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	; 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	613b      	str	r3, [r7, #16]
  return result;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	2103      	movs	r1, #3
 800303c:	fa01 f303 	lsl.w	r3, r1, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	401a      	ands	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	fa93 f3a3 	rbit	r3, r3
 800304e:	61bb      	str	r3, [r7, #24]
  return result;
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	fab3 f383 	clz	r3, r3
 8003056:	b2db      	uxtb	r3, r3
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	fa01 f303 	lsl.w	r3, r1, r3
 8003060:	431a      	orrs	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	60da      	str	r2, [r3, #12]
}
 8003066:	bf00      	nop
 8003068:	3724      	adds	r7, #36	; 0x24
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003072:	b480      	push	{r7}
 8003074:	b089      	sub	sp, #36	; 0x24
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a1a      	ldr	r2, [r3, #32]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	fa93 f3a3 	rbit	r3, r3
 800308c:	613b      	str	r3, [r7, #16]
  return result;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	fab3 f383 	clz	r3, r3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	210f      	movs	r1, #15
 800309a:	fa01 f303 	lsl.w	r3, r1, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	401a      	ands	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	61bb      	str	r3, [r7, #24]
  return result;
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	fab3 f383 	clz	r3, r3
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	fa01 f303 	lsl.w	r3, r1, r3
 80030be:	431a      	orrs	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80030c4:	bf00      	nop
 80030c6:	3724      	adds	r7, #36	; 0x24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b089      	sub	sp, #36	; 0x24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	fa93 f3a3 	rbit	r3, r3
 80030ec:	613b      	str	r3, [r7, #16]
  return result;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	fab3 f383 	clz	r3, r3
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	210f      	movs	r1, #15
 80030fa:	fa01 f303 	lsl.w	r3, r1, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	401a      	ands	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	0a1b      	lsrs	r3, r3, #8
 8003106:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	fa93 f3a3 	rbit	r3, r3
 800310e:	61bb      	str	r3, [r7, #24]
  return result;
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	b2db      	uxtb	r3, r3
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	fa01 f303 	lsl.w	r3, r1, r3
 8003120:	431a      	orrs	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8003126:	bf00      	nop
 8003128:	3724      	adds	r7, #36	; 0x24
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b088      	sub	sp, #32
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	613b      	str	r3, [r7, #16]
  return result;
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	fab3 f383 	clz	r3, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003154:	e051      	b.n	80031fa <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	2101      	movs	r1, #1
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	fa01 f303 	lsl.w	r3, r1, r3
 8003162:	4013      	ands	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d043      	beq.n	80031f4 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d003      	beq.n	800317c <LL_GPIO_Init+0x4a>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d10e      	bne.n	800319a <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	461a      	mov	r2, r3
 8003182:	69b9      	ldr	r1, [r7, #24]
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff ff16 	bl	8002fb6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	6819      	ldr	r1, [r3, #0]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	461a      	mov	r2, r3
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff fef6 	bl	8002f86 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	461a      	mov	r2, r3
 80031a0:	69b9      	ldr	r1, [r7, #24]
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7ff ff36 	bl	8003014 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d11a      	bne.n	80031e6 <LL_GPIO_Init+0xb4>
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	60bb      	str	r3, [r7, #8]
  return result;
 80031bc:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80031be:	fab3 f383 	clz	r3, r3
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b07      	cmp	r3, #7
 80031c6:	d807      	bhi.n	80031d8 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	461a      	mov	r2, r3
 80031ce:	69b9      	ldr	r1, [r7, #24]
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff ff4e 	bl	8003072 <LL_GPIO_SetAFPin_0_7>
 80031d6:	e006      	b.n	80031e6 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	461a      	mov	r2, r3
 80031de:	69b9      	ldr	r1, [r7, #24]
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff ff75 	bl	80030d0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	461a      	mov	r2, r3
 80031ec:	69b9      	ldr	r1, [r7, #24]
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff fe9a 	bl	8002f28 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	3301      	adds	r3, #1
 80031f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	fa22 f303 	lsr.w	r3, r2, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1a6      	bne.n	8003156 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3720      	adds	r7, #32
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <LL_RCC_HSI_IsReady>:
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003218:	4b06      	ldr	r3, [pc, #24]	; (8003234 <LL_RCC_HSI_IsReady+0x20>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b02      	cmp	r3, #2
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
}
 800322a:	4618      	mov	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	40021000 	.word	0x40021000

08003238 <LL_RCC_LSE_IsReady>:
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <LL_RCC_LSE_IsReady+0x20>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b02      	cmp	r3, #2
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
}
 800324e:	4618      	mov	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40021000 	.word	0x40021000

0800325c <LL_RCC_GetSysClkSource>:
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003260:	4b04      	ldr	r3, [pc, #16]	; (8003274 <LL_RCC_GetSysClkSource+0x18>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 030c 	and.w	r3, r3, #12
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000

08003278 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800327c:	4b04      	ldr	r3, [pc, #16]	; (8003290 <LL_RCC_GetAHBPrescaler+0x18>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003284:	4618      	mov	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40021000 	.word	0x40021000

08003294 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003298:	4b04      	ldr	r3, [pc, #16]	; (80032ac <LL_RCC_GetAPB1Prescaler+0x18>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000

080032b0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80032b4:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80032bc:	4618      	mov	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000

080032cc <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80032d4:	4b07      	ldr	r3, [pc, #28]	; (80032f4 <LL_RCC_GetUSARTClockSource+0x28>)
 80032d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d8:	2103      	movs	r1, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	fa01 f303 	lsl.w	r3, r1, r3
 80032e0:	401a      	ands	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	061b      	lsls	r3, r3, #24
 80032e6:	4313      	orrs	r3, r2
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	40021000 	.word	0x40021000

080032f8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80032fc:	4b04      	ldr	r3, [pc, #16]	; (8003310 <LL_RCC_PLL_GetMainSource+0x18>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8003304:	4618      	mov	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40021000 	.word	0x40021000

08003314 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8003318:	4b04      	ldr	r3, [pc, #16]	; (800332c <LL_RCC_PLL_GetMultiplicator+0x18>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000

08003330 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8003334:	4b04      	ldr	r3, [pc, #16]	; (8003348 <LL_RCC_PLL_GetPrediv+0x18>)
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	f003 030f 	and.w	r3, r3, #15
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000

0800334c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003354:	f000 f860 	bl	8003418 <RCC_GetSystemClockFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f000 f87a 	bl	800345c <RCC_GetHCLKClockFreq>
 8003368:	4602      	mov	r2, r0
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f888 	bl	8003488 <RCC_GetPCLK1ClockFreq>
 8003378:	4602      	mov	r2, r0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f894 	bl	80034b0 <RCC_GetPCLK2ClockFreq>
 8003388:	4602      	mov	r2, r0
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	60da      	str	r2, [r3, #12]
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d12a      	bne.n	8003400 <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7ff ff8e 	bl	80032cc <LL_RCC_GetUSARTClockSource>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d00f      	beq.n	80033d6 <LL_RCC_GetUSARTClockFreq+0x3e>
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d005      	beq.n	80033c6 <LL_RCC_GetUSARTClockFreq+0x2e>
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d114      	bne.n	80033e8 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80033be:	f000 f82b 	bl	8003418 <RCC_GetSystemClockFreq>
 80033c2:	60f8      	str	r0, [r7, #12]
        break;
 80033c4:	e021      	b.n	800340a <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80033c6:	f7ff ff25 	bl	8003214 <LL_RCC_HSI_IsReady>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d019      	beq.n	8003404 <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 80033d0:	4b10      	ldr	r3, [pc, #64]	; (8003414 <LL_RCC_GetUSARTClockFreq+0x7c>)
 80033d2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80033d4:	e016      	b.n	8003404 <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80033d6:	f7ff ff2f 	bl	8003238 <LL_RCC_LSE_IsReady>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d013      	beq.n	8003408 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 80033e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033e4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80033e6:	e00f      	b.n	8003408 <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80033e8:	f000 f816 	bl	8003418 <RCC_GetSystemClockFreq>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 f834 	bl	800345c <RCC_GetHCLKClockFreq>
 80033f4:	4603      	mov	r3, r0
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 f846 	bl	8003488 <RCC_GetPCLK1ClockFreq>
 80033fc:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80033fe:	e004      	b.n	800340a <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 8003400:	bf00      	nop
 8003402:	e002      	b.n	800340a <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8003404:	bf00      	nop
 8003406:	e000      	b.n	800340a <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8003408:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 800340a:	68fb      	ldr	r3, [r7, #12]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	007a1200 	.word	0x007a1200

08003418 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003422:	f7ff ff1b 	bl	800325c <LL_RCC_GetSysClkSource>
 8003426:	4603      	mov	r3, r0
 8003428:	2b04      	cmp	r3, #4
 800342a:	d006      	beq.n	800343a <RCC_GetSystemClockFreq+0x22>
 800342c:	2b08      	cmp	r3, #8
 800342e:	d007      	beq.n	8003440 <RCC_GetSystemClockFreq+0x28>
 8003430:	2b00      	cmp	r3, #0
 8003432:	d109      	bne.n	8003448 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003434:	4b08      	ldr	r3, [pc, #32]	; (8003458 <RCC_GetSystemClockFreq+0x40>)
 8003436:	607b      	str	r3, [r7, #4]
      break;
 8003438:	e009      	b.n	800344e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800343a:	4b07      	ldr	r3, [pc, #28]	; (8003458 <RCC_GetSystemClockFreq+0x40>)
 800343c:	607b      	str	r3, [r7, #4]
      break;
 800343e:	e006      	b.n	800344e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003440:	f000 f84a 	bl	80034d8 <RCC_PLL_GetFreqDomain_SYS>
 8003444:	6078      	str	r0, [r7, #4]
      break;
 8003446:	e002      	b.n	800344e <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8003448:	4b03      	ldr	r3, [pc, #12]	; (8003458 <RCC_GetSystemClockFreq+0x40>)
 800344a:	607b      	str	r3, [r7, #4]
      break;
 800344c:	bf00      	nop
  }

  return frequency;
 800344e:	687b      	ldr	r3, [r7, #4]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	007a1200 	.word	0x007a1200

0800345c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003464:	f7ff ff08 	bl	8003278 <LL_RCC_GetAHBPrescaler>
 8003468:	4603      	mov	r3, r0
 800346a:	091b      	lsrs	r3, r3, #4
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	4a04      	ldr	r2, [pc, #16]	; (8003484 <RCC_GetHCLKClockFreq+0x28>)
 8003472:	5cd3      	ldrb	r3, [r2, r3]
 8003474:	461a      	mov	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	40d3      	lsrs	r3, r2
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	0800390c 	.word	0x0800390c

08003488 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003490:	f7ff ff00 	bl	8003294 <LL_RCC_GetAPB1Prescaler>
 8003494:	4603      	mov	r3, r0
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <RCC_GetPCLK1ClockFreq+0x24>)
 800349a:	5cd3      	ldrb	r3, [r2, r3]
 800349c:	461a      	mov	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	40d3      	lsrs	r3, r2
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	0800391c 	.word	0x0800391c

080034b0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80034b8:	f7ff fefa 	bl	80032b0 <LL_RCC_GetAPB2Prescaler>
 80034bc:	4603      	mov	r3, r0
 80034be:	0adb      	lsrs	r3, r3, #11
 80034c0:	4a04      	ldr	r2, [pc, #16]	; (80034d4 <RCC_GetPCLK2ClockFreq+0x24>)
 80034c2:	5cd3      	ldrb	r3, [r2, r3]
 80034c4:	461a      	mov	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	40d3      	lsrs	r3, r2
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	0800391c 	.word	0x0800391c

080034d8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80034e6:	f7ff ff07 	bl	80032f8 <LL_RCC_PLL_GetMainSource>
 80034ea:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <RCC_PLL_GetFreqDomain_SYS+0x22>
 80034f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f6:	d003      	beq.n	8003500 <RCC_PLL_GetFreqDomain_SYS+0x28>
 80034f8:	e005      	b.n	8003506 <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80034fa:	4b14      	ldr	r3, [pc, #80]	; (800354c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80034fc:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80034fe:	e005      	b.n	800350c <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003500:	4b13      	ldr	r3, [pc, #76]	; (8003550 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003502:	60fb      	str	r3, [r7, #12]
      break;
 8003504:	e002      	b.n	800350c <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8003506:	4b11      	ldr	r3, [pc, #68]	; (800354c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003508:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800350a:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800350c:	f7ff ff10 	bl	8003330 <LL_RCC_PLL_GetPrediv>
 8003510:	4603      	mov	r3, r0
 8003512:	3301      	adds	r3, #1
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	fbb2 f4f3 	udiv	r4, r2, r3
 800351a:	f7ff fefb 	bl	8003314 <LL_RCC_PLL_GetMultiplicator>
 800351e:	4603      	mov	r3, r0
 8003520:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003524:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003528:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	fa92 f2a2 	rbit	r2, r2
 8003530:	603a      	str	r2, [r7, #0]
  return result;
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	fab2 f282 	clz	r2, r2
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	40d3      	lsrs	r3, r2
 800353c:	3302      	adds	r3, #2
 800353e:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	bd90      	pop	{r4, r7, pc}
 800354a:	bf00      	nop
 800354c:	003d0900 	.word	0x003d0900
 8003550:	007a1200 	.word	0x007a1200

08003554 <LL_USART_IsEnabled>:
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <LL_USART_IsEnabled+0x18>
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <LL_USART_IsEnabled+0x1a>
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <LL_USART_SetStopBitsLength>:
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	605a      	str	r2, [r3, #4]
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <LL_USART_SetHWFlowCtrl>:
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	609a      	str	r2, [r3, #8]
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <LL_USART_SetBaudRate>:
{
 80035c6:	b490      	push	{r4, r7}
 80035c8:	b086      	sub	sp, #24
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035da:	d116      	bne.n	800360a <LL_USART_SetBaudRate+0x44>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	005a      	lsls	r2, r3, #1
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	085b      	lsrs	r3, r3, #1
 80035e4:	441a      	add	r2, r3
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80035f6:	401c      	ands	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	085b      	lsrs	r3, r3, #1
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	60dc      	str	r4, [r3, #12]
}
 8003608:	e00a      	b.n	8003620 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	085a      	lsrs	r2, r3, #1
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	441a      	add	r2, r3
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	fbb2 f3f3 	udiv	r3, r2, r3
 8003618:	b29b      	uxth	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	60da      	str	r2, [r3, #12]
}
 8003620:	bf00      	nop
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bc90      	pop	{r4, r7}
 8003628:	4770      	bx	lr
	...

0800362c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800363a:	2300      	movs	r3, #0
 800363c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff ff88 	bl	8003554 <LL_USART_IsEnabled>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d14e      	bne.n	80036e8 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	4b29      	ldr	r3, [pc, #164]	; (80036f4 <LL_USART_Init+0xc8>)
 8003650:	4013      	ands	r3, r2
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	6851      	ldr	r1, [r2, #4]
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	68d2      	ldr	r2, [r2, #12]
 800365a:	4311      	orrs	r1, r2
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	6912      	ldr	r2, [r2, #16]
 8003660:	4311      	orrs	r1, r2
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	6992      	ldr	r2, [r2, #24]
 8003666:	430a      	orrs	r2, r1
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	4619      	mov	r1, r3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff ff80 	bl	800357a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	4619      	mov	r1, r3
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff ff8d 	bl	80035a0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a1b      	ldr	r2, [pc, #108]	; (80036f8 <LL_USART_Init+0xcc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d104      	bne.n	8003698 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800368e:	2000      	movs	r0, #0
 8003690:	f7ff fe82 	bl	8003398 <LL_RCC_GetUSARTClockFreq>
 8003694:	61b8      	str	r0, [r7, #24]
 8003696:	e016      	b.n	80036c6 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a18      	ldr	r2, [pc, #96]	; (80036fc <LL_USART_Init+0xd0>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d107      	bne.n	80036b0 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80036a0:	f107 0308 	add.w	r3, r7, #8
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fe51 	bl	800334c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	e00a      	b.n	80036c6 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a13      	ldr	r2, [pc, #76]	; (8003700 <LL_USART_Init+0xd4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d106      	bne.n	80036c6 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80036b8:	f107 0308 	add.w	r3, r7, #8
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff fe45 	bl	800334c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d009      	beq.n	80036e8 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80036d4:	2300      	movs	r3, #0
 80036d6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	699a      	ldr	r2, [r3, #24]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69b9      	ldr	r1, [r7, #24]
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff ff6f 	bl	80035c6 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80036e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3720      	adds	r7, #32
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	efff69f3 	.word	0xefff69f3
 80036f8:	40013800 	.word	0x40013800
 80036fc:	40004400 	.word	0x40004400
 8003700:	40004800 	.word	0x40004800

08003704 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800370c:	4a04      	ldr	r2, [pc, #16]	; (8003720 <LL_SetSystemCoreClock+0x1c>)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6013      	str	r3, [r2, #0]
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	20000018 	.word	0x20000018

08003724 <atoi>:
 8003724:	220a      	movs	r2, #10
 8003726:	2100      	movs	r1, #0
 8003728:	f000 b8a8 	b.w	800387c <strtol>

0800372c <__libc_init_array>:
 800372c:	b570      	push	{r4, r5, r6, lr}
 800372e:	4e0d      	ldr	r6, [pc, #52]	; (8003764 <__libc_init_array+0x38>)
 8003730:	4c0d      	ldr	r4, [pc, #52]	; (8003768 <__libc_init_array+0x3c>)
 8003732:	1ba4      	subs	r4, r4, r6
 8003734:	10a4      	asrs	r4, r4, #2
 8003736:	2500      	movs	r5, #0
 8003738:	42a5      	cmp	r5, r4
 800373a:	d109      	bne.n	8003750 <__libc_init_array+0x24>
 800373c:	4e0b      	ldr	r6, [pc, #44]	; (800376c <__libc_init_array+0x40>)
 800373e:	4c0c      	ldr	r4, [pc, #48]	; (8003770 <__libc_init_array+0x44>)
 8003740:	f000 f8d4 	bl	80038ec <_init>
 8003744:	1ba4      	subs	r4, r4, r6
 8003746:	10a4      	asrs	r4, r4, #2
 8003748:	2500      	movs	r5, #0
 800374a:	42a5      	cmp	r5, r4
 800374c:	d105      	bne.n	800375a <__libc_init_array+0x2e>
 800374e:	bd70      	pop	{r4, r5, r6, pc}
 8003750:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003754:	4798      	blx	r3
 8003756:	3501      	adds	r5, #1
 8003758:	e7ee      	b.n	8003738 <__libc_init_array+0xc>
 800375a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800375e:	4798      	blx	r3
 8003760:	3501      	adds	r5, #1
 8003762:	e7f2      	b.n	800374a <__libc_init_array+0x1e>
 8003764:	08003a38 	.word	0x08003a38
 8003768:	08003a38 	.word	0x08003a38
 800376c:	08003a38 	.word	0x08003a38
 8003770:	08003a3c 	.word	0x08003a3c

08003774 <memset>:
 8003774:	4402      	add	r2, r0
 8003776:	4603      	mov	r3, r0
 8003778:	4293      	cmp	r3, r2
 800377a:	d100      	bne.n	800377e <memset+0xa>
 800377c:	4770      	bx	lr
 800377e:	f803 1b01 	strb.w	r1, [r3], #1
 8003782:	e7f9      	b.n	8003778 <memset+0x4>

08003784 <_strtol_l.isra.0>:
 8003784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003788:	4680      	mov	r8, r0
 800378a:	4689      	mov	r9, r1
 800378c:	4692      	mov	sl, r2
 800378e:	461e      	mov	r6, r3
 8003790:	460f      	mov	r7, r1
 8003792:	463d      	mov	r5, r7
 8003794:	9808      	ldr	r0, [sp, #32]
 8003796:	f815 4b01 	ldrb.w	r4, [r5], #1
 800379a:	f000 f885 	bl	80038a8 <__locale_ctype_ptr_l>
 800379e:	4420      	add	r0, r4
 80037a0:	7843      	ldrb	r3, [r0, #1]
 80037a2:	f013 0308 	ands.w	r3, r3, #8
 80037a6:	d132      	bne.n	800380e <_strtol_l.isra.0+0x8a>
 80037a8:	2c2d      	cmp	r4, #45	; 0x2d
 80037aa:	d132      	bne.n	8003812 <_strtol_l.isra.0+0x8e>
 80037ac:	787c      	ldrb	r4, [r7, #1]
 80037ae:	1cbd      	adds	r5, r7, #2
 80037b0:	2201      	movs	r2, #1
 80037b2:	2e00      	cmp	r6, #0
 80037b4:	d05d      	beq.n	8003872 <_strtol_l.isra.0+0xee>
 80037b6:	2e10      	cmp	r6, #16
 80037b8:	d109      	bne.n	80037ce <_strtol_l.isra.0+0x4a>
 80037ba:	2c30      	cmp	r4, #48	; 0x30
 80037bc:	d107      	bne.n	80037ce <_strtol_l.isra.0+0x4a>
 80037be:	782b      	ldrb	r3, [r5, #0]
 80037c0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80037c4:	2b58      	cmp	r3, #88	; 0x58
 80037c6:	d14f      	bne.n	8003868 <_strtol_l.isra.0+0xe4>
 80037c8:	786c      	ldrb	r4, [r5, #1]
 80037ca:	2610      	movs	r6, #16
 80037cc:	3502      	adds	r5, #2
 80037ce:	2a00      	cmp	r2, #0
 80037d0:	bf14      	ite	ne
 80037d2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80037d6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80037da:	2700      	movs	r7, #0
 80037dc:	fbb1 fcf6 	udiv	ip, r1, r6
 80037e0:	4638      	mov	r0, r7
 80037e2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80037e6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80037ea:	2b09      	cmp	r3, #9
 80037ec:	d817      	bhi.n	800381e <_strtol_l.isra.0+0x9a>
 80037ee:	461c      	mov	r4, r3
 80037f0:	42a6      	cmp	r6, r4
 80037f2:	dd23      	ble.n	800383c <_strtol_l.isra.0+0xb8>
 80037f4:	1c7b      	adds	r3, r7, #1
 80037f6:	d007      	beq.n	8003808 <_strtol_l.isra.0+0x84>
 80037f8:	4584      	cmp	ip, r0
 80037fa:	d31c      	bcc.n	8003836 <_strtol_l.isra.0+0xb2>
 80037fc:	d101      	bne.n	8003802 <_strtol_l.isra.0+0x7e>
 80037fe:	45a6      	cmp	lr, r4
 8003800:	db19      	blt.n	8003836 <_strtol_l.isra.0+0xb2>
 8003802:	fb00 4006 	mla	r0, r0, r6, r4
 8003806:	2701      	movs	r7, #1
 8003808:	f815 4b01 	ldrb.w	r4, [r5], #1
 800380c:	e7eb      	b.n	80037e6 <_strtol_l.isra.0+0x62>
 800380e:	462f      	mov	r7, r5
 8003810:	e7bf      	b.n	8003792 <_strtol_l.isra.0+0xe>
 8003812:	2c2b      	cmp	r4, #43	; 0x2b
 8003814:	bf04      	itt	eq
 8003816:	1cbd      	addeq	r5, r7, #2
 8003818:	787c      	ldrbeq	r4, [r7, #1]
 800381a:	461a      	mov	r2, r3
 800381c:	e7c9      	b.n	80037b2 <_strtol_l.isra.0+0x2e>
 800381e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003822:	2b19      	cmp	r3, #25
 8003824:	d801      	bhi.n	800382a <_strtol_l.isra.0+0xa6>
 8003826:	3c37      	subs	r4, #55	; 0x37
 8003828:	e7e2      	b.n	80037f0 <_strtol_l.isra.0+0x6c>
 800382a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800382e:	2b19      	cmp	r3, #25
 8003830:	d804      	bhi.n	800383c <_strtol_l.isra.0+0xb8>
 8003832:	3c57      	subs	r4, #87	; 0x57
 8003834:	e7dc      	b.n	80037f0 <_strtol_l.isra.0+0x6c>
 8003836:	f04f 37ff 	mov.w	r7, #4294967295
 800383a:	e7e5      	b.n	8003808 <_strtol_l.isra.0+0x84>
 800383c:	1c7b      	adds	r3, r7, #1
 800383e:	d108      	bne.n	8003852 <_strtol_l.isra.0+0xce>
 8003840:	2322      	movs	r3, #34	; 0x22
 8003842:	f8c8 3000 	str.w	r3, [r8]
 8003846:	4608      	mov	r0, r1
 8003848:	f1ba 0f00 	cmp.w	sl, #0
 800384c:	d107      	bne.n	800385e <_strtol_l.isra.0+0xda>
 800384e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003852:	b102      	cbz	r2, 8003856 <_strtol_l.isra.0+0xd2>
 8003854:	4240      	negs	r0, r0
 8003856:	f1ba 0f00 	cmp.w	sl, #0
 800385a:	d0f8      	beq.n	800384e <_strtol_l.isra.0+0xca>
 800385c:	b10f      	cbz	r7, 8003862 <_strtol_l.isra.0+0xde>
 800385e:	f105 39ff 	add.w	r9, r5, #4294967295
 8003862:	f8ca 9000 	str.w	r9, [sl]
 8003866:	e7f2      	b.n	800384e <_strtol_l.isra.0+0xca>
 8003868:	2430      	movs	r4, #48	; 0x30
 800386a:	2e00      	cmp	r6, #0
 800386c:	d1af      	bne.n	80037ce <_strtol_l.isra.0+0x4a>
 800386e:	2608      	movs	r6, #8
 8003870:	e7ad      	b.n	80037ce <_strtol_l.isra.0+0x4a>
 8003872:	2c30      	cmp	r4, #48	; 0x30
 8003874:	d0a3      	beq.n	80037be <_strtol_l.isra.0+0x3a>
 8003876:	260a      	movs	r6, #10
 8003878:	e7a9      	b.n	80037ce <_strtol_l.isra.0+0x4a>
	...

0800387c <strtol>:
 800387c:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <strtol+0x24>)
 800387e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003880:	681c      	ldr	r4, [r3, #0]
 8003882:	4d08      	ldr	r5, [pc, #32]	; (80038a4 <strtol+0x28>)
 8003884:	6a23      	ldr	r3, [r4, #32]
 8003886:	2b00      	cmp	r3, #0
 8003888:	bf08      	it	eq
 800388a:	462b      	moveq	r3, r5
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	4613      	mov	r3, r2
 8003890:	460a      	mov	r2, r1
 8003892:	4601      	mov	r1, r0
 8003894:	4620      	mov	r0, r4
 8003896:	f7ff ff75 	bl	8003784 <_strtol_l.isra.0>
 800389a:	b003      	add	sp, #12
 800389c:	bd30      	pop	{r4, r5, pc}
 800389e:	bf00      	nop
 80038a0:	20000024 	.word	0x20000024
 80038a4:	20000088 	.word	0x20000088

080038a8 <__locale_ctype_ptr_l>:
 80038a8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80038ac:	4770      	bx	lr

080038ae <__ascii_mbtowc>:
 80038ae:	b082      	sub	sp, #8
 80038b0:	b901      	cbnz	r1, 80038b4 <__ascii_mbtowc+0x6>
 80038b2:	a901      	add	r1, sp, #4
 80038b4:	b142      	cbz	r2, 80038c8 <__ascii_mbtowc+0x1a>
 80038b6:	b14b      	cbz	r3, 80038cc <__ascii_mbtowc+0x1e>
 80038b8:	7813      	ldrb	r3, [r2, #0]
 80038ba:	600b      	str	r3, [r1, #0]
 80038bc:	7812      	ldrb	r2, [r2, #0]
 80038be:	1c10      	adds	r0, r2, #0
 80038c0:	bf18      	it	ne
 80038c2:	2001      	movne	r0, #1
 80038c4:	b002      	add	sp, #8
 80038c6:	4770      	bx	lr
 80038c8:	4610      	mov	r0, r2
 80038ca:	e7fb      	b.n	80038c4 <__ascii_mbtowc+0x16>
 80038cc:	f06f 0001 	mvn.w	r0, #1
 80038d0:	e7f8      	b.n	80038c4 <__ascii_mbtowc+0x16>

080038d2 <__ascii_wctomb>:
 80038d2:	b149      	cbz	r1, 80038e8 <__ascii_wctomb+0x16>
 80038d4:	2aff      	cmp	r2, #255	; 0xff
 80038d6:	bf85      	ittet	hi
 80038d8:	238a      	movhi	r3, #138	; 0x8a
 80038da:	6003      	strhi	r3, [r0, #0]
 80038dc:	700a      	strbls	r2, [r1, #0]
 80038de:	f04f 30ff 	movhi.w	r0, #4294967295
 80038e2:	bf98      	it	ls
 80038e4:	2001      	movls	r0, #1
 80038e6:	4770      	bx	lr
 80038e8:	4608      	mov	r0, r1
 80038ea:	4770      	bx	lr

080038ec <_init>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	bf00      	nop
 80038f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f2:	bc08      	pop	{r3}
 80038f4:	469e      	mov	lr, r3
 80038f6:	4770      	bx	lr

080038f8 <_fini>:
 80038f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fa:	bf00      	nop
 80038fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fe:	bc08      	pop	{r3}
 8003900:	469e      	mov	lr, r3
 8003902:	4770      	bx	lr
